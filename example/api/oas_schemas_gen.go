// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"
)

// Ref: #/components/schemas/Keyboard
type Keyboard struct {
	ID       int64    `json:"id"`
	Name     string   `json:"name"`
	Switches Switches `json:"switches"`
	Keycaps  Keycaps  `json:"keycaps"`
	Price    int64    `json:"price"`
	Discount NilInt64 `json:"discount"`
}

// GetID returns the value of ID.
func (s *Keyboard) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Keyboard) GetName() string {
	return s.Name
}

// GetSwitches returns the value of Switches.
func (s *Keyboard) GetSwitches() Switches {
	return s.Switches
}

// GetKeycaps returns the value of Keycaps.
func (s *Keyboard) GetKeycaps() Keycaps {
	return s.Keycaps
}

// GetPrice returns the value of Price.
func (s *Keyboard) GetPrice() int64 {
	return s.Price
}

// GetDiscount returns the value of Discount.
func (s *Keyboard) GetDiscount() NilInt64 {
	return s.Discount
}

// SetID sets the value of ID.
func (s *Keyboard) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Keyboard) SetName(val string) {
	s.Name = val
}

// SetSwitches sets the value of Switches.
func (s *Keyboard) SetSwitches(val Switches) {
	s.Switches = val
}

// SetKeycaps sets the value of Keycaps.
func (s *Keyboard) SetKeycaps(val Keycaps) {
	s.Keycaps = val
}

// SetPrice sets the value of Price.
func (s *Keyboard) SetPrice(val int64) {
	s.Price = val
}

// SetDiscount sets the value of Discount.
func (s *Keyboard) SetDiscount(val NilInt64) {
	s.Discount = val
}

// Ref: #/components/schemas/Keycaps
type Keycaps struct {
	ID       int64           `json:"id"`
	Name     string          `json:"name"`
	Profile  string          `json:"profile"`
	Material KeycapsMaterial `json:"material"`
}

// GetID returns the value of ID.
func (s *Keycaps) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Keycaps) GetName() string {
	return s.Name
}

// GetProfile returns the value of Profile.
func (s *Keycaps) GetProfile() string {
	return s.Profile
}

// GetMaterial returns the value of Material.
func (s *Keycaps) GetMaterial() KeycapsMaterial {
	return s.Material
}

// SetID sets the value of ID.
func (s *Keycaps) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Keycaps) SetName(val string) {
	s.Name = val
}

// SetProfile sets the value of Profile.
func (s *Keycaps) SetProfile(val string) {
	s.Profile = val
}

// SetMaterial sets the value of Material.
func (s *Keycaps) SetMaterial(val KeycapsMaterial) {
	s.Material = val
}

type KeycapsMaterial string

const (
	KeycapsMaterialABS KeycapsMaterial = "ABS"
	KeycapsMaterialPBT KeycapsMaterial = "PBT"
)

// AllValues returns all KeycapsMaterial values.
func (KeycapsMaterial) AllValues() []KeycapsMaterial {
	return []KeycapsMaterial{
		KeycapsMaterialABS,
		KeycapsMaterialPBT,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s KeycapsMaterial) MarshalText() ([]byte, error) {
	switch s {
	case KeycapsMaterialABS:
		return []byte(s), nil
	case KeycapsMaterialPBT:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *KeycapsMaterial) UnmarshalText(data []byte) error {
	switch KeycapsMaterial(data) {
	case KeycapsMaterialABS:
		*s = KeycapsMaterialABS
		return nil
	case KeycapsMaterialPBT:
		*s = KeycapsMaterialPBT
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// NewNilInt64 returns new NilInt64 with value set to v.
func NewNilInt64(v int64) NilInt64 {
	return NilInt64{
		Value: v,
	}
}

// NilInt64 is nullable int64.
type NilInt64 struct {
	Value int64
	Null  bool
}

// SetTo sets value to v.
func (o *NilInt64) SetTo(v int64) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilInt64) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *NilInt64) SetToNull() {
	o.Null = true
	var v int64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o NilInt64) Get() (v int64, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Switches
type Switches struct {
	ID         int64              `json:"id"`
	Name       string             `json:"name"`
	SwitchType SwitchesSwitchType `json:"switch_type"`
}

// GetID returns the value of ID.
func (s *Switches) GetID() int64 {
	return s.ID
}

// GetName returns the value of Name.
func (s *Switches) GetName() string {
	return s.Name
}

// GetSwitchType returns the value of SwitchType.
func (s *Switches) GetSwitchType() SwitchesSwitchType {
	return s.SwitchType
}

// SetID sets the value of ID.
func (s *Switches) SetID(val int64) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Switches) SetName(val string) {
	s.Name = val
}

// SetSwitchType sets the value of SwitchType.
func (s *Switches) SetSwitchType(val SwitchesSwitchType) {
	s.SwitchType = val
}

type SwitchesSwitchType string

const (
	SwitchesSwitchTypeMechanical        SwitchesSwitchType = "mechanical"
	SwitchesSwitchTypeOptical           SwitchesSwitchType = "optical"
	SwitchesSwitchTypeElectrocapacitive SwitchesSwitchType = "electrocapacitive"
)

// AllValues returns all SwitchesSwitchType values.
func (SwitchesSwitchType) AllValues() []SwitchesSwitchType {
	return []SwitchesSwitchType{
		SwitchesSwitchTypeMechanical,
		SwitchesSwitchTypeOptical,
		SwitchesSwitchTypeElectrocapacitive,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SwitchesSwitchType) MarshalText() ([]byte, error) {
	switch s {
	case SwitchesSwitchTypeMechanical:
		return []byte(s), nil
	case SwitchesSwitchTypeOptical:
		return []byte(s), nil
	case SwitchesSwitchTypeElectrocapacitive:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SwitchesSwitchType) UnmarshalText(data []byte) error {
	switch SwitchesSwitchType(data) {
	case SwitchesSwitchTypeMechanical:
		*s = SwitchesSwitchTypeMechanical
		return nil
	case SwitchesSwitchTypeOptical:
		*s = SwitchesSwitchTypeOptical
		return nil
	case SwitchesSwitchTypeElectrocapacitive:
		*s = SwitchesSwitchTypeElectrocapacitive
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
