// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"fmt"

	"github.com/google/uuid"
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/City
type City struct {
	Name         string              "json:\"name\""
	RequiredEnum CityRequiredEnum    "json:\"required_enum\""
	NullableEnum NilCityNullableEnum "json:\"nullable_enum\""
}

type CityNullableEnum string

const (
	CityNullableEnumC CityNullableEnum = "c"
	CityNullableEnumD CityNullableEnum = "d"
)

type CityRequiredEnum string

const (
	CityRequiredEnumA CityRequiredEnum = "a"
	CityRequiredEnumB CityRequiredEnum = "b"
)

type ErrorResponse struct {
	ErrorMessage string "json:\"error_message\""
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// NewNilCityNullableEnum returns new NilCityNullableEnum with value set to v.
func NewNilCityNullableEnum(v CityNullableEnum) NilCityNullableEnum {
	return NilCityNullableEnum{
		Value: v,
	}
}

// NilCityNullableEnum is nullable CityNullableEnum.
type NilCityNullableEnum struct {
	Value CityNullableEnum
	Null  bool
}

// SetTo sets value to v.
func (o *NilCityNullableEnum) SetTo(v CityNullableEnum) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCityNullableEnum) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCityNullableEnum) Get() (v CityNullableEnum, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCityNullableEnum) Or(d CityNullableEnum) CityNullableEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCity returns new OptCity with value set to v.
func NewOptCity(v City) OptCity {
	return OptCity{
		Value: v,
		Set:   true,
	}
}

// OptCity is optional City.
type OptCity struct {
	Value City
	Set   bool
}

// IsSet returns true if OptCity was set.
func (o OptCity) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCity) Reset() {
	var v City
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCity) SetTo(v City) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCity) Get() (v City, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCity) Or(d City) City {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/User
type User struct {
	ID                   uuid.UUID  "json:\"id\""
	FirstName            string     "json:\"first_name\""
	LastName             string     "json:\"last_name\""
	Username             string     "json:\"username\""
	OptionalNullableBool OptNilBool "json:\"optional_nullable_bool\""
	RequiredCity         City       "json:\"required_city\""
	OptionalCity         OptCity    "json:\"optional_city\""
	Friends              []User     "json:\"friends\""
}
