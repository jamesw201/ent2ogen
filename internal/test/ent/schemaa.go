// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ogen-go/ent2ogen/internal/test/ent/schemaa"
	"github.com/ogen-go/ent2ogen/internal/test/ent/schemab"
)

// SchemaA is the model entity for the SchemaA schema.
type SchemaA struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Int64 holds the value of the "int64" field.
	Int64 int64 `json:"int64,omitempty"`
	// StringBindtoFoobar holds the value of the "string_bindto_foobar" field.
	StringBindtoFoobar string `json:"string_bindto_foobar,omitempty"`
	// StringOptionalNullable holds the value of the "string_optional_nullable" field.
	StringOptionalNullable *string `json:"string_optional_nullable,omitempty"`
	// OptionalNullableBool holds the value of the "optional_nullable_bool" field.
	OptionalNullableBool *bool `json:"optional_nullable_bool,omitempty"`
	// JsontypeStrings holds the value of the "jsontype_strings" field.
	JsontypeStrings []string `json:"jsontype_strings,omitempty"`
	// JsontypeStringsOptional holds the value of the "jsontype_strings_optional" field.
	JsontypeStringsOptional []string `json:"jsontype_strings_optional,omitempty"`
	// RequiredEnum holds the value of the "required_enum" field.
	RequiredEnum schemaa.RequiredEnum `json:"required_enum,omitempty"`
	// OptionalNullableEnum holds the value of the "optional_nullable_enum" field.
	OptionalNullableEnum *schemaa.OptionalNullableEnum `json:"optional_nullable_enum,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SchemaAQuery when eager-loading is set.
	Edges                                          SchemaAEdges `json:"edges"`
	schemaa_edge_schemab_unique_required           *int64
	schemaa_edge_schemab_unique_required_bindto_bs *int64
	schemaa_edge_schemab_unique_optional           *int64
}

// SchemaAEdges holds the relations/edges for other nodes in the graph.
type SchemaAEdges struct {
	// EdgeSchemabUniqueRequired holds the value of the edge_schemab_unique_required edge.
	EdgeSchemabUniqueRequired *SchemaB `json:"edge_schemab_unique_required,omitempty"`
	// EdgeSchemabUniqueRequiredBindtoBs holds the value of the edge_schemab_unique_required_bindto_bs edge.
	EdgeSchemabUniqueRequiredBindtoBs *SchemaB `json:"edge_schemab_unique_required_bindto_bs,omitempty"`
	// EdgeSchemabUniqueOptional holds the value of the edge_schemab_unique_optional edge.
	EdgeSchemabUniqueOptional *SchemaB `json:"edge_schemab_unique_optional,omitempty"`
	// EdgeSchemab holds the value of the edge_schemab edge.
	EdgeSchemab []*SchemaB `json:"edge_schemab,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// EdgeSchemabUniqueRequiredOrErr returns the EdgeSchemabUniqueRequired value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SchemaAEdges) EdgeSchemabUniqueRequiredOrErr() (*SchemaB, error) {
	if e.loadedTypes[0] {
		if e.EdgeSchemabUniqueRequired == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: schemab.Label}
		}
		return e.EdgeSchemabUniqueRequired, nil
	}
	return nil, &NotLoadedError{edge: "edge_schemab_unique_required"}
}

// EdgeSchemabUniqueRequiredBindtoBsOrErr returns the EdgeSchemabUniqueRequiredBindtoBs value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SchemaAEdges) EdgeSchemabUniqueRequiredBindtoBsOrErr() (*SchemaB, error) {
	if e.loadedTypes[1] {
		if e.EdgeSchemabUniqueRequiredBindtoBs == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: schemab.Label}
		}
		return e.EdgeSchemabUniqueRequiredBindtoBs, nil
	}
	return nil, &NotLoadedError{edge: "edge_schemab_unique_required_bindto_bs"}
}

// EdgeSchemabUniqueOptionalOrErr returns the EdgeSchemabUniqueOptional value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SchemaAEdges) EdgeSchemabUniqueOptionalOrErr() (*SchemaB, error) {
	if e.loadedTypes[2] {
		if e.EdgeSchemabUniqueOptional == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: schemab.Label}
		}
		return e.EdgeSchemabUniqueOptional, nil
	}
	return nil, &NotLoadedError{edge: "edge_schemab_unique_optional"}
}

// EdgeSchemabOrErr returns the EdgeSchemab value or an error if the edge
// was not loaded in eager-loading.
func (e SchemaAEdges) EdgeSchemabOrErr() ([]*SchemaB, error) {
	if e.loadedTypes[3] {
		return e.EdgeSchemab, nil
	}
	return nil, &NotLoadedError{edge: "edge_schemab"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SchemaA) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schemaa.FieldJsontypeStrings, schemaa.FieldJsontypeStringsOptional:
			values[i] = new([]byte)
		case schemaa.FieldOptionalNullableBool:
			values[i] = new(sql.NullBool)
		case schemaa.FieldID, schemaa.FieldInt64:
			values[i] = new(sql.NullInt64)
		case schemaa.FieldStringBindtoFoobar, schemaa.FieldStringOptionalNullable, schemaa.FieldRequiredEnum, schemaa.FieldOptionalNullableEnum:
			values[i] = new(sql.NullString)
		case schemaa.ForeignKeys[0]: // schemaa_edge_schemab_unique_required
			values[i] = new(sql.NullInt64)
		case schemaa.ForeignKeys[1]: // schemaa_edge_schemab_unique_required_bindto_bs
			values[i] = new(sql.NullInt64)
		case schemaa.ForeignKeys[2]: // schemaa_edge_schemab_unique_optional
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SchemaA", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SchemaA fields.
func (s *SchemaA) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schemaa.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case schemaa.FieldInt64:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field int64", values[i])
			} else if value.Valid {
				s.Int64 = value.Int64
			}
		case schemaa.FieldStringBindtoFoobar:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_bindto_foobar", values[i])
			} else if value.Valid {
				s.StringBindtoFoobar = value.String
			}
		case schemaa.FieldStringOptionalNullable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field string_optional_nullable", values[i])
			} else if value.Valid {
				s.StringOptionalNullable = new(string)
				*s.StringOptionalNullable = value.String
			}
		case schemaa.FieldOptionalNullableBool:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field optional_nullable_bool", values[i])
			} else if value.Valid {
				s.OptionalNullableBool = new(bool)
				*s.OptionalNullableBool = value.Bool
			}
		case schemaa.FieldJsontypeStrings:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field jsontype_strings", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.JsontypeStrings); err != nil {
					return fmt.Errorf("unmarshal field jsontype_strings: %w", err)
				}
			}
		case schemaa.FieldJsontypeStringsOptional:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field jsontype_strings_optional", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.JsontypeStringsOptional); err != nil {
					return fmt.Errorf("unmarshal field jsontype_strings_optional: %w", err)
				}
			}
		case schemaa.FieldRequiredEnum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field required_enum", values[i])
			} else if value.Valid {
				s.RequiredEnum = schemaa.RequiredEnum(value.String)
			}
		case schemaa.FieldOptionalNullableEnum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field optional_nullable_enum", values[i])
			} else if value.Valid {
				s.OptionalNullableEnum = new(schemaa.OptionalNullableEnum)
				*s.OptionalNullableEnum = schemaa.OptionalNullableEnum(value.String)
			}
		case schemaa.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field schemaa_edge_schemab_unique_required", value)
			} else if value.Valid {
				s.schemaa_edge_schemab_unique_required = new(int64)
				*s.schemaa_edge_schemab_unique_required = int64(value.Int64)
			}
		case schemaa.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field schemaa_edge_schemab_unique_required_bindto_bs", value)
			} else if value.Valid {
				s.schemaa_edge_schemab_unique_required_bindto_bs = new(int64)
				*s.schemaa_edge_schemab_unique_required_bindto_bs = int64(value.Int64)
			}
		case schemaa.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field schemaa_edge_schemab_unique_optional", value)
			} else if value.Valid {
				s.schemaa_edge_schemab_unique_optional = new(int64)
				*s.schemaa_edge_schemab_unique_optional = int64(value.Int64)
			}
		}
	}
	return nil
}

// QueryEdgeSchemabUniqueRequired queries the "edge_schemab_unique_required" edge of the SchemaA entity.
func (s *SchemaA) QueryEdgeSchemabUniqueRequired() *SchemaBQuery {
	return (&SchemaAClient{config: s.config}).QueryEdgeSchemabUniqueRequired(s)
}

// QueryEdgeSchemabUniqueRequiredBindtoBs queries the "edge_schemab_unique_required_bindto_bs" edge of the SchemaA entity.
func (s *SchemaA) QueryEdgeSchemabUniqueRequiredBindtoBs() *SchemaBQuery {
	return (&SchemaAClient{config: s.config}).QueryEdgeSchemabUniqueRequiredBindtoBs(s)
}

// QueryEdgeSchemabUniqueOptional queries the "edge_schemab_unique_optional" edge of the SchemaA entity.
func (s *SchemaA) QueryEdgeSchemabUniqueOptional() *SchemaBQuery {
	return (&SchemaAClient{config: s.config}).QueryEdgeSchemabUniqueOptional(s)
}

// QueryEdgeSchemab queries the "edge_schemab" edge of the SchemaA entity.
func (s *SchemaA) QueryEdgeSchemab() *SchemaBQuery {
	return (&SchemaAClient{config: s.config}).QueryEdgeSchemab(s)
}

// Update returns a builder for updating this SchemaA.
// Note that you need to call SchemaA.Unwrap() before calling this method if this SchemaA
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *SchemaA) Update() *SchemaAUpdateOne {
	return (&SchemaAClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the SchemaA entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *SchemaA) Unwrap() *SchemaA {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: SchemaA is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *SchemaA) String() string {
	var builder strings.Builder
	builder.WriteString("SchemaA(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("int64=")
	builder.WriteString(fmt.Sprintf("%v", s.Int64))
	builder.WriteString(", ")
	builder.WriteString("string_bindto_foobar=")
	builder.WriteString(s.StringBindtoFoobar)
	builder.WriteString(", ")
	if v := s.StringOptionalNullable; v != nil {
		builder.WriteString("string_optional_nullable=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := s.OptionalNullableBool; v != nil {
		builder.WriteString("optional_nullable_bool=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("jsontype_strings=")
	builder.WriteString(fmt.Sprintf("%v", s.JsontypeStrings))
	builder.WriteString(", ")
	builder.WriteString("jsontype_strings_optional=")
	builder.WriteString(fmt.Sprintf("%v", s.JsontypeStringsOptional))
	builder.WriteString(", ")
	builder.WriteString("required_enum=")
	builder.WriteString(fmt.Sprintf("%v", s.RequiredEnum))
	builder.WriteString(", ")
	if v := s.OptionalNullableEnum; v != nil {
		builder.WriteString("optional_nullable_enum=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// SchemaAs is a parsable slice of SchemaA.
type SchemaAs []*SchemaA

func (s SchemaAs) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
