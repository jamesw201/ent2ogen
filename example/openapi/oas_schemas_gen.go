// Code generated by ogen, DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"math"
	"math/big"
	"math/bits"
	"net"
	"net/http"
	"net/netip"
	"net/url"
	"regexp"
	"sort"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	"go.opentelemetry.io/otel/metric/instrument/syncint64"
	"go.opentelemetry.io/otel/metric/nonrecording"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/json"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// No-op definition for keeping imports.
var (
	_ = bytes.NewReader
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = io.Copy
	_ = math.Mod
	_ = big.Rat{}
	_ = bits.LeadingZeros64
	_ = net.IP{}
	_ = http.MethodGet
	_ = netip.Addr{}
	_ = url.URL{}
	_ = regexp.MustCompile
	_ = sort.Ints
	_ = strconv.ParseInt
	_ = strings.Builder{}
	_ = sync.Pool{}
	_ = time.Time{}

	_ = errors.Is
	_ = jx.Null
	_ = uuid.UUID{}
	_ = otel.GetTracerProvider
	_ = attribute.KeyValue{}
	_ = codes.Unset
	_ = metric.MeterConfig{}
	_ = syncint64.Counter(nil)
	_ = nonrecording.NewNoopMeterProvider
	_ = trace.TraceIDFromHex

	_ = conv.ToInt32
	_ = ht.NewRequest
	_ = json.Marshal
	_ = ogenerrors.SecurityError{}
	_ = otelogen.Version
	_ = uri.PathEncoder{}
	_ = validate.Int{}
)

func (s *ErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/City
type City struct {
	Name         string              "json:\"name\""
	RequiredEnum CityRequiredEnum    "json:\"required_enum\""
	NullableEnum NilCityNullableEnum "json:\"nullable_enum\""
}

type CityNullableEnum string

const (
	CityNullableEnumC CityNullableEnum = "c"
	CityNullableEnumD CityNullableEnum = "d"
)

type CityRequiredEnum string

const (
	CityRequiredEnumA CityRequiredEnum = "a"
	CityRequiredEnumB CityRequiredEnum = "b"
)

type ErrorResponse struct {
	ErrorMessage string "json:\"error_message\""
}

// ErrorResponseStatusCode wraps ErrorResponse with StatusCode.
type ErrorResponseStatusCode struct {
	StatusCode int
	Response   ErrorResponse
}

// NewNilCityNullableEnum returns new NilCityNullableEnum with value set to v.
func NewNilCityNullableEnum(v CityNullableEnum) NilCityNullableEnum {
	return NilCityNullableEnum{
		Value: v,
	}
}

// NilCityNullableEnum is nullable CityNullableEnum.
type NilCityNullableEnum struct {
	Value CityNullableEnum
	Null  bool
}

// SetTo sets value to v.
func (o *NilCityNullableEnum) SetTo(v CityNullableEnum) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilCityNullableEnum) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilCityNullableEnum) Get() (v CityNullableEnum, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilCityNullableEnum) Or(d CityNullableEnum) CityNullableEnum {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBool returns new OptNilBool with value set to v.
func NewOptNilBool(v bool) OptNilBool {
	return OptNilBool{
		Value: v,
		Set:   true,
	}
}

// OptNilBool is optional nullable bool.
type OptNilBool struct {
	Value bool
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBool was set.
func (o OptNilBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBool) SetTo(v bool) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBool) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBool) Get() (v bool, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/User
type User struct {
	ID                   uuid.UUID  "json:\"id\""
	FirstName            string     "json:\"first_name\""
	LastName             string     "json:\"last_name\""
	Username             string     "json:\"username\""
	OptionalNullableBool OptNilBool "json:\"optional_nullable_bool\""
	City                 City       "json:\"city\""
	Friends              []User     "json:\"friends\""
}
