// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogen-go/ent2ogen/example/ent/keyboard"
	"github.com/ogen-go/ent2ogen/example/ent/keycapmodel"
	"github.com/ogen-go/ent2ogen/example/ent/predicate"
	"github.com/ogen-go/ent2ogen/example/ent/switchmodel"
)

// KeyboardUpdate is the builder for updating Keyboard entities.
type KeyboardUpdate struct {
	config
	hooks    []Hook
	mutation *KeyboardMutation
}

// Where appends a list predicates to the KeyboardUpdate builder.
func (ku *KeyboardUpdate) Where(ps ...predicate.Keyboard) *KeyboardUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetName sets the "name" field.
func (ku *KeyboardUpdate) SetName(s string) *KeyboardUpdate {
	ku.mutation.SetName(s)
	return ku
}

// SetPrice sets the "price" field.
func (ku *KeyboardUpdate) SetPrice(i int64) *KeyboardUpdate {
	ku.mutation.ResetPrice()
	ku.mutation.SetPrice(i)
	return ku
}

// AddPrice adds i to the "price" field.
func (ku *KeyboardUpdate) AddPrice(i int64) *KeyboardUpdate {
	ku.mutation.AddPrice(i)
	return ku
}

// SetDiscount sets the "discount" field.
func (ku *KeyboardUpdate) SetDiscount(i int64) *KeyboardUpdate {
	ku.mutation.ResetDiscount()
	ku.mutation.SetDiscount(i)
	return ku
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (ku *KeyboardUpdate) SetNillableDiscount(i *int64) *KeyboardUpdate {
	if i != nil {
		ku.SetDiscount(*i)
	}
	return ku
}

// AddDiscount adds i to the "discount" field.
func (ku *KeyboardUpdate) AddDiscount(i int64) *KeyboardUpdate {
	ku.mutation.AddDiscount(i)
	return ku
}

// ClearDiscount clears the value of the "discount" field.
func (ku *KeyboardUpdate) ClearDiscount() *KeyboardUpdate {
	ku.mutation.ClearDiscount()
	return ku
}

// SetSwitchesID sets the "switches" edge to the SwitchModel entity by ID.
func (ku *KeyboardUpdate) SetSwitchesID(id int64) *KeyboardUpdate {
	ku.mutation.SetSwitchesID(id)
	return ku
}

// SetSwitches sets the "switches" edge to the SwitchModel entity.
func (ku *KeyboardUpdate) SetSwitches(s *SwitchModel) *KeyboardUpdate {
	return ku.SetSwitchesID(s.ID)
}

// SetKeycapsID sets the "keycaps" edge to the KeycapModel entity by ID.
func (ku *KeyboardUpdate) SetKeycapsID(id int64) *KeyboardUpdate {
	ku.mutation.SetKeycapsID(id)
	return ku
}

// SetKeycaps sets the "keycaps" edge to the KeycapModel entity.
func (ku *KeyboardUpdate) SetKeycaps(k *KeycapModel) *KeyboardUpdate {
	return ku.SetKeycapsID(k.ID)
}

// Mutation returns the KeyboardMutation object of the builder.
func (ku *KeyboardUpdate) Mutation() *KeyboardMutation {
	return ku.mutation
}

// ClearSwitches clears the "switches" edge to the SwitchModel entity.
func (ku *KeyboardUpdate) ClearSwitches() *KeyboardUpdate {
	ku.mutation.ClearSwitches()
	return ku
}

// ClearKeycaps clears the "keycaps" edge to the KeycapModel entity.
func (ku *KeyboardUpdate) ClearKeycaps() *KeyboardUpdate {
	ku.mutation.ClearKeycaps()
	return ku
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KeyboardUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KeyboardUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KeyboardUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KeyboardUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ku *KeyboardUpdate) check() error {
	if v, ok := ku.mutation.Name(); ok {
		if err := keyboard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Keyboard.name": %w`, err)}
		}
	}
	if _, ok := ku.mutation.SwitchesID(); ku.mutation.SwitchesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Keyboard.switches"`)
	}
	if _, ok := ku.mutation.KeycapsID(); ku.mutation.KeycapsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Keyboard.keycaps"`)
	}
	return nil
}

func (ku *KeyboardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ku.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(keyboard.Table, keyboard.Columns, sqlgraph.NewFieldSpec(keyboard.FieldID, field.TypeInt64))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.Name(); ok {
		_spec.SetField(keyboard.FieldName, field.TypeString, value)
	}
	if value, ok := ku.mutation.Price(); ok {
		_spec.SetField(keyboard.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := ku.mutation.AddedPrice(); ok {
		_spec.AddField(keyboard.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := ku.mutation.Discount(); ok {
		_spec.SetField(keyboard.FieldDiscount, field.TypeInt64, value)
	}
	if value, ok := ku.mutation.AddedDiscount(); ok {
		_spec.AddField(keyboard.FieldDiscount, field.TypeInt64, value)
	}
	if ku.mutation.DiscountCleared() {
		_spec.ClearField(keyboard.FieldDiscount, field.TypeInt64)
	}
	if ku.mutation.SwitchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.SwitchesTable,
			Columns: []string{keyboard.SwitchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(switchmodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.SwitchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.SwitchesTable,
			Columns: []string{keyboard.SwitchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(switchmodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ku.mutation.KeycapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.KeycapsTable,
			Columns: []string{keyboard.KeycapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keycapmodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ku.mutation.KeycapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.KeycapsTable,
			Columns: []string{keyboard.KeycapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keycapmodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KeyboardUpdateOne is the builder for updating a single Keyboard entity.
type KeyboardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *KeyboardMutation
}

// SetName sets the "name" field.
func (kuo *KeyboardUpdateOne) SetName(s string) *KeyboardUpdateOne {
	kuo.mutation.SetName(s)
	return kuo
}

// SetPrice sets the "price" field.
func (kuo *KeyboardUpdateOne) SetPrice(i int64) *KeyboardUpdateOne {
	kuo.mutation.ResetPrice()
	kuo.mutation.SetPrice(i)
	return kuo
}

// AddPrice adds i to the "price" field.
func (kuo *KeyboardUpdateOne) AddPrice(i int64) *KeyboardUpdateOne {
	kuo.mutation.AddPrice(i)
	return kuo
}

// SetDiscount sets the "discount" field.
func (kuo *KeyboardUpdateOne) SetDiscount(i int64) *KeyboardUpdateOne {
	kuo.mutation.ResetDiscount()
	kuo.mutation.SetDiscount(i)
	return kuo
}

// SetNillableDiscount sets the "discount" field if the given value is not nil.
func (kuo *KeyboardUpdateOne) SetNillableDiscount(i *int64) *KeyboardUpdateOne {
	if i != nil {
		kuo.SetDiscount(*i)
	}
	return kuo
}

// AddDiscount adds i to the "discount" field.
func (kuo *KeyboardUpdateOne) AddDiscount(i int64) *KeyboardUpdateOne {
	kuo.mutation.AddDiscount(i)
	return kuo
}

// ClearDiscount clears the value of the "discount" field.
func (kuo *KeyboardUpdateOne) ClearDiscount() *KeyboardUpdateOne {
	kuo.mutation.ClearDiscount()
	return kuo
}

// SetSwitchesID sets the "switches" edge to the SwitchModel entity by ID.
func (kuo *KeyboardUpdateOne) SetSwitchesID(id int64) *KeyboardUpdateOne {
	kuo.mutation.SetSwitchesID(id)
	return kuo
}

// SetSwitches sets the "switches" edge to the SwitchModel entity.
func (kuo *KeyboardUpdateOne) SetSwitches(s *SwitchModel) *KeyboardUpdateOne {
	return kuo.SetSwitchesID(s.ID)
}

// SetKeycapsID sets the "keycaps" edge to the KeycapModel entity by ID.
func (kuo *KeyboardUpdateOne) SetKeycapsID(id int64) *KeyboardUpdateOne {
	kuo.mutation.SetKeycapsID(id)
	return kuo
}

// SetKeycaps sets the "keycaps" edge to the KeycapModel entity.
func (kuo *KeyboardUpdateOne) SetKeycaps(k *KeycapModel) *KeyboardUpdateOne {
	return kuo.SetKeycapsID(k.ID)
}

// Mutation returns the KeyboardMutation object of the builder.
func (kuo *KeyboardUpdateOne) Mutation() *KeyboardMutation {
	return kuo.mutation
}

// ClearSwitches clears the "switches" edge to the SwitchModel entity.
func (kuo *KeyboardUpdateOne) ClearSwitches() *KeyboardUpdateOne {
	kuo.mutation.ClearSwitches()
	return kuo
}

// ClearKeycaps clears the "keycaps" edge to the KeycapModel entity.
func (kuo *KeyboardUpdateOne) ClearKeycaps() *KeyboardUpdateOne {
	kuo.mutation.ClearKeycaps()
	return kuo
}

// Where appends a list predicates to the KeyboardUpdate builder.
func (kuo *KeyboardUpdateOne) Where(ps ...predicate.Keyboard) *KeyboardUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KeyboardUpdateOne) Select(field string, fields ...string) *KeyboardUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Keyboard entity.
func (kuo *KeyboardUpdateOne) Save(ctx context.Context) (*Keyboard, error) {
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KeyboardUpdateOne) SaveX(ctx context.Context) *Keyboard {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KeyboardUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KeyboardUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kuo *KeyboardUpdateOne) check() error {
	if v, ok := kuo.mutation.Name(); ok {
		if err := keyboard.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Keyboard.name": %w`, err)}
		}
	}
	if _, ok := kuo.mutation.SwitchesID(); kuo.mutation.SwitchesCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Keyboard.switches"`)
	}
	if _, ok := kuo.mutation.KeycapsID(); kuo.mutation.KeycapsCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Keyboard.keycaps"`)
	}
	return nil
}

func (kuo *KeyboardUpdateOne) sqlSave(ctx context.Context) (_node *Keyboard, err error) {
	if err := kuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(keyboard.Table, keyboard.Columns, sqlgraph.NewFieldSpec(keyboard.FieldID, field.TypeInt64))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Keyboard.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, keyboard.FieldID)
		for _, f := range fields {
			if !keyboard.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != keyboard.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.Name(); ok {
		_spec.SetField(keyboard.FieldName, field.TypeString, value)
	}
	if value, ok := kuo.mutation.Price(); ok {
		_spec.SetField(keyboard.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := kuo.mutation.AddedPrice(); ok {
		_spec.AddField(keyboard.FieldPrice, field.TypeInt64, value)
	}
	if value, ok := kuo.mutation.Discount(); ok {
		_spec.SetField(keyboard.FieldDiscount, field.TypeInt64, value)
	}
	if value, ok := kuo.mutation.AddedDiscount(); ok {
		_spec.AddField(keyboard.FieldDiscount, field.TypeInt64, value)
	}
	if kuo.mutation.DiscountCleared() {
		_spec.ClearField(keyboard.FieldDiscount, field.TypeInt64)
	}
	if kuo.mutation.SwitchesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.SwitchesTable,
			Columns: []string{keyboard.SwitchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(switchmodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.SwitchesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.SwitchesTable,
			Columns: []string{keyboard.SwitchesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(switchmodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if kuo.mutation.KeycapsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.KeycapsTable,
			Columns: []string{keyboard.KeycapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keycapmodel.FieldID, field.TypeInt64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := kuo.mutation.KeycapsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   keyboard.KeycapsTable,
			Columns: []string{keyboard.KeycapsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(keycapmodel.FieldID, field.TypeInt64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Keyboard{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{keyboard.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}
