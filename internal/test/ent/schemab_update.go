// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogen-go/ent2ogen/internal/test/ent/predicate"
	"github.com/ogen-go/ent2ogen/internal/test/ent/schemab"
)

// SchemaBUpdate is the builder for updating SchemaB entities.
type SchemaBUpdate struct {
	config
	hooks    []Hook
	mutation *SchemaBMutation
}

// Where appends a list predicates to the SchemaBUpdate builder.
func (sb *SchemaBUpdate) Where(ps ...predicate.SchemaB) *SchemaBUpdate {
	sb.mutation.Where(ps...)
	return sb
}

// Mutation returns the SchemaBMutation object of the builder.
func (sb *SchemaBUpdate) Mutation() *SchemaBMutation {
	return sb.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sb *SchemaBUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sb.hooks) == 0 {
		affected, err = sb.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SchemaBMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sb.mutation = mutation
			affected, err = sb.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sb.hooks) - 1; i >= 0; i-- {
			if sb.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sb.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sb.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sb *SchemaBUpdate) SaveX(ctx context.Context) int {
	affected, err := sb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sb *SchemaBUpdate) Exec(ctx context.Context) error {
	_, err := sb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sb *SchemaBUpdate) ExecX(ctx context.Context) {
	if err := sb.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sb *SchemaBUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schemab.Table,
			Columns: schemab.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: schemab.FieldID,
			},
		},
	}
	if ps := sb.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sb.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schemab.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SchemaBUpdateOne is the builder for updating a single SchemaB entity.
type SchemaBUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SchemaBMutation
}

// Mutation returns the SchemaBMutation object of the builder.
func (sbo *SchemaBUpdateOne) Mutation() *SchemaBMutation {
	return sbo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sbo *SchemaBUpdateOne) Select(field string, fields ...string) *SchemaBUpdateOne {
	sbo.fields = append([]string{field}, fields...)
	return sbo
}

// Save executes the query and returns the updated SchemaB entity.
func (sbo *SchemaBUpdateOne) Save(ctx context.Context) (*SchemaB, error) {
	var (
		err  error
		node *SchemaB
	)
	if len(sbo.hooks) == 0 {
		node, err = sbo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SchemaBMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sbo.mutation = mutation
			node, err = sbo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sbo.hooks) - 1; i >= 0; i-- {
			if sbo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sbo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, sbo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SchemaB)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SchemaBMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sbo *SchemaBUpdateOne) SaveX(ctx context.Context) *SchemaB {
	node, err := sbo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sbo *SchemaBUpdateOne) Exec(ctx context.Context) error {
	_, err := sbo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sbo *SchemaBUpdateOne) ExecX(ctx context.Context) {
	if err := sbo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sbo *SchemaBUpdateOne) sqlSave(ctx context.Context) (_node *SchemaB, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   schemab.Table,
			Columns: schemab.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: schemab.FieldID,
			},
		},
	}
	id, ok := sbo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SchemaB.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sbo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, schemab.FieldID)
		for _, f := range fields {
			if !schemab.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != schemab.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sbo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &SchemaB{config: sbo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sbo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{schemab.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
