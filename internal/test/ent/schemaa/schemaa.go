// Code generated by ent, DO NOT EDIT.

package schemaa

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the schemaa type in the database.
	Label = "schemaa"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldInt64 holds the string denoting the int64 field in the database.
	FieldInt64 = "int64"
	// FieldStringBindtoFoobar holds the string denoting the string_bindto_foobar field in the database.
	FieldStringBindtoFoobar = "string_bindto_foobar"
	// FieldStringOptionalNullable holds the string denoting the string_optional_nullable field in the database.
	FieldStringOptionalNullable = "string_optional_nullable"
	// FieldOptionalNullableBool holds the string denoting the optional_nullable_bool field in the database.
	FieldOptionalNullableBool = "optional_nullable_bool"
	// FieldJsontypeStrings holds the string denoting the jsontype_strings field in the database.
	FieldJsontypeStrings = "jsontype_strings"
	// FieldJsontypeStringsOptional holds the string denoting the jsontype_strings_optional field in the database.
	FieldJsontypeStringsOptional = "jsontype_strings_optional"
	// FieldJsontypeInts holds the string denoting the jsontype_ints field in the database.
	FieldJsontypeInts = "jsontype_ints"
	// FieldJsontypeIntsOptional holds the string denoting the jsontype_ints_optional field in the database.
	FieldJsontypeIntsOptional = "jsontype_ints_optional"
	// FieldRequiredEnum holds the string denoting the required_enum field in the database.
	FieldRequiredEnum = "required_enum"
	// FieldOptionalNullableEnum holds the string denoting the optional_nullable_enum field in the database.
	FieldOptionalNullableEnum = "optional_nullable_enum"
	// FieldBytes holds the string denoting the bytes field in the database.
	FieldBytes = "bytes"
	// EdgeEdgeSchemabUniqueRequired holds the string denoting the edge_schemab_unique_required edge name in mutations.
	EdgeEdgeSchemabUniqueRequired = "edge_schemab_unique_required"
	// EdgeEdgeSchemabUniqueRequiredBindtoBs holds the string denoting the edge_schemab_unique_required_bindto_bs edge name in mutations.
	EdgeEdgeSchemabUniqueRequiredBindtoBs = "edge_schemab_unique_required_bindto_bs"
	// EdgeEdgeSchemabUniqueOptional holds the string denoting the edge_schemab_unique_optional edge name in mutations.
	EdgeEdgeSchemabUniqueOptional = "edge_schemab_unique_optional"
	// EdgeEdgeSchemab holds the string denoting the edge_schemab edge name in mutations.
	EdgeEdgeSchemab = "edge_schemab"
	// EdgeEdgeSchemaaRecursive holds the string denoting the edge_schemaa_recursive edge name in mutations.
	EdgeEdgeSchemaaRecursive = "edge_schemaa_recursive"
	// Table holds the table name of the schemaa in the database.
	Table = "schema_as"
	// EdgeSchemabUniqueRequiredTable is the table that holds the edge_schemab_unique_required relation/edge.
	EdgeSchemabUniqueRequiredTable = "schema_as"
	// EdgeSchemabUniqueRequiredInverseTable is the table name for the SchemaB entity.
	// It exists in this package in order to avoid circular dependency with the "schemab" package.
	EdgeSchemabUniqueRequiredInverseTable = "schema_bs"
	// EdgeSchemabUniqueRequiredColumn is the table column denoting the edge_schemab_unique_required relation/edge.
	EdgeSchemabUniqueRequiredColumn = "schemaa_edge_schemab_unique_required"
	// EdgeSchemabUniqueRequiredBindtoBsTable is the table that holds the edge_schemab_unique_required_bindto_bs relation/edge.
	EdgeSchemabUniqueRequiredBindtoBsTable = "schema_as"
	// EdgeSchemabUniqueRequiredBindtoBsInverseTable is the table name for the SchemaB entity.
	// It exists in this package in order to avoid circular dependency with the "schemab" package.
	EdgeSchemabUniqueRequiredBindtoBsInverseTable = "schema_bs"
	// EdgeSchemabUniqueRequiredBindtoBsColumn is the table column denoting the edge_schemab_unique_required_bindto_bs relation/edge.
	EdgeSchemabUniqueRequiredBindtoBsColumn = "schemaa_edge_schemab_unique_required_bindto_bs"
	// EdgeSchemabUniqueOptionalTable is the table that holds the edge_schemab_unique_optional relation/edge.
	EdgeSchemabUniqueOptionalTable = "schema_as"
	// EdgeSchemabUniqueOptionalInverseTable is the table name for the SchemaB entity.
	// It exists in this package in order to avoid circular dependency with the "schemab" package.
	EdgeSchemabUniqueOptionalInverseTable = "schema_bs"
	// EdgeSchemabUniqueOptionalColumn is the table column denoting the edge_schemab_unique_optional relation/edge.
	EdgeSchemabUniqueOptionalColumn = "schemaa_edge_schemab_unique_optional"
	// EdgeSchemabTable is the table that holds the edge_schemab relation/edge.
	EdgeSchemabTable = "schema_bs"
	// EdgeSchemabInverseTable is the table name for the SchemaB entity.
	// It exists in this package in order to avoid circular dependency with the "schemab" package.
	EdgeSchemabInverseTable = "schema_bs"
	// EdgeSchemabColumn is the table column denoting the edge_schemab relation/edge.
	EdgeSchemabColumn = "schemaa_edge_schemab"
	// EdgeSchemaaRecursiveTable is the table that holds the edge_schemaa_recursive relation/edge. The primary key declared below.
	EdgeSchemaaRecursiveTable = "schemaa_edge_schemaa_recursive"
)

// Columns holds all SQL columns for schemaa fields.
var Columns = []string{
	FieldID,
	FieldInt64,
	FieldStringBindtoFoobar,
	FieldStringOptionalNullable,
	FieldOptionalNullableBool,
	FieldJsontypeStrings,
	FieldJsontypeStringsOptional,
	FieldJsontypeInts,
	FieldJsontypeIntsOptional,
	FieldRequiredEnum,
	FieldOptionalNullableEnum,
	FieldBytes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "schema_as"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"schemaa_edge_schemab_unique_required",
	"schemaa_edge_schemab_unique_required_bindto_bs",
	"schemaa_edge_schemab_unique_optional",
}

var (
	// EdgeSchemaaRecursivePrimaryKey and EdgeSchemaaRecursiveColumn2 are the table columns denoting the
	// primary key for the edge_schemaa_recursive relation (M2M).
	EdgeSchemaaRecursivePrimaryKey = []string{"schemaa_id", "edge_schemaa_recursive_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// RequiredEnum defines the type for the "required_enum" enum field.
type RequiredEnum string

// RequiredEnum values.
const (
	RequiredEnumA RequiredEnum = "a"
	RequiredEnumB RequiredEnum = "b"
)

func (re RequiredEnum) String() string {
	return string(re)
}

// RequiredEnumValidator is a validator for the "required_enum" field enum values. It is called by the builders before save.
func RequiredEnumValidator(re RequiredEnum) error {
	switch re {
	case RequiredEnumA, RequiredEnumB:
		return nil
	default:
		return fmt.Errorf("schemaa: invalid enum value for required_enum field: %q", re)
	}
}

// OptionalNullableEnum defines the type for the "optional_nullable_enum" enum field.
type OptionalNullableEnum string

// OptionalNullableEnum values.
const (
	OptionalNullableEnumC OptionalNullableEnum = "c"
	OptionalNullableEnumD OptionalNullableEnum = "d"
)

func (one OptionalNullableEnum) String() string {
	return string(one)
}

// OptionalNullableEnumValidator is a validator for the "optional_nullable_enum" field enum values. It is called by the builders before save.
func OptionalNullableEnumValidator(one OptionalNullableEnum) error {
	switch one {
	case OptionalNullableEnumC, OptionalNullableEnumD:
		return nil
	default:
		return fmt.Errorf("schemaa: invalid enum value for optional_nullable_enum field: %q", one)
	}
}

// Order defines the ordering method for the SchemaA queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByInt64 orders the results by the int64 field.
func ByInt64(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldInt64, opts...).ToFunc()
}

// ByStringBindtoFoobar orders the results by the string_bindto_foobar field.
func ByStringBindtoFoobar(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStringBindtoFoobar, opts...).ToFunc()
}

// ByStringOptionalNullable orders the results by the string_optional_nullable field.
func ByStringOptionalNullable(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldStringOptionalNullable, opts...).ToFunc()
}

// ByOptionalNullableBool orders the results by the optional_nullable_bool field.
func ByOptionalNullableBool(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOptionalNullableBool, opts...).ToFunc()
}

// ByRequiredEnum orders the results by the required_enum field.
func ByRequiredEnum(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldRequiredEnum, opts...).ToFunc()
}

// ByOptionalNullableEnum orders the results by the optional_nullable_enum field.
func ByOptionalNullableEnum(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldOptionalNullableEnum, opts...).ToFunc()
}

// ByEdgeSchemabUniqueRequiredField orders the results by edge_schemab_unique_required field.
func ByEdgeSchemabUniqueRequiredField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEdgeSchemabUniqueRequiredStep(), sql.OrderByField(field, opts...))
	}
}

// ByEdgeSchemabUniqueRequiredBindtoBsField orders the results by edge_schemab_unique_required_bindto_bs field.
func ByEdgeSchemabUniqueRequiredBindtoBsField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEdgeSchemabUniqueRequiredBindtoBsStep(), sql.OrderByField(field, opts...))
	}
}

// ByEdgeSchemabUniqueOptionalField orders the results by edge_schemab_unique_optional field.
func ByEdgeSchemabUniqueOptionalField(field string, opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEdgeSchemabUniqueOptionalStep(), sql.OrderByField(field, opts...))
	}
}

// ByEdgeSchemabCount orders the results by edge_schemab count.
func ByEdgeSchemabCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEdgeSchemabStep(), opts...)
	}
}

// ByEdgeSchemab orders the results by edge_schemab terms.
func ByEdgeSchemab(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEdgeSchemabStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEdgeSchemaaRecursiveCount orders the results by edge_schemaa_recursive count.
func ByEdgeSchemaaRecursiveCount(opts ...sql.OrderTermOption) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEdgeSchemaaRecursiveStep(), opts...)
	}
}

// ByEdgeSchemaaRecursive orders the results by edge_schemaa_recursive terms.
func ByEdgeSchemaaRecursive(term sql.OrderTerm, terms ...sql.OrderTerm) Order {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEdgeSchemaaRecursiveStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newEdgeSchemabUniqueRequiredStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EdgeSchemabUniqueRequiredInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EdgeSchemabUniqueRequiredTable, EdgeSchemabUniqueRequiredColumn),
	)
}
func newEdgeSchemabUniqueRequiredBindtoBsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EdgeSchemabUniqueRequiredBindtoBsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EdgeSchemabUniqueRequiredBindtoBsTable, EdgeSchemabUniqueRequiredBindtoBsColumn),
	)
}
func newEdgeSchemabUniqueOptionalStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EdgeSchemabUniqueOptionalInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, EdgeSchemabUniqueOptionalTable, EdgeSchemabUniqueOptionalColumn),
	)
}
func newEdgeSchemabStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EdgeSchemabInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, EdgeSchemabTable, EdgeSchemabColumn),
	)
}
func newEdgeSchemaaRecursiveStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EdgeSchemaaRecursiveTable, EdgeSchemaaRecursivePrimaryKey...),
	)
}
