// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/ogen-go/ent2ogen/example/ent/switchmodel"
)

// SwitchModel is the model entity for the SwitchModel schema.
type SwitchModel struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// SwitchType holds the value of the "switch_type" field.
	SwitchType switchmodel.SwitchType `json:"switch_type,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SwitchModel) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case switchmodel.FieldID:
			values[i] = new(sql.NullInt64)
		case switchmodel.FieldName, switchmodel.FieldSwitchType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type SwitchModel", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SwitchModel fields.
func (sm *SwitchModel) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case switchmodel.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int64(value.Int64)
		case switchmodel.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				sm.Name = value.String
			}
		case switchmodel.FieldSwitchType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field switch_type", values[i])
			} else if value.Valid {
				sm.SwitchType = switchmodel.SwitchType(value.String)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this SwitchModel.
// Note that you need to call SwitchModel.Unwrap() before calling this method if this SwitchModel
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SwitchModel) Update() *SwitchModelUpdateOne {
	return (&SwitchModelClient{config: sm.config}).UpdateOne(sm)
}

// Unwrap unwraps the SwitchModel entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SwitchModel) Unwrap() *SwitchModel {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SwitchModel is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SwitchModel) String() string {
	var builder strings.Builder
	builder.WriteString("SwitchModel(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sm.ID))
	builder.WriteString("name=")
	builder.WriteString(sm.Name)
	builder.WriteString(", ")
	builder.WriteString("switch_type=")
	builder.WriteString(fmt.Sprintf("%v", sm.SwitchType))
	builder.WriteByte(')')
	return builder.String()
}

// SwitchModels is a parsable slice of SwitchModel.
type SwitchModels []*SwitchModel

func (sm SwitchModels) config(cfg config) {
	for _i := range sm {
		sm[_i].config = cfg
	}
}
