// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"

	openapi "github.com/ogen-go/ent2ogen/example/openapi"
)

type CitySlice []*City

func (s CitySlice) ToOpenAPI() (_ []openapi.City, err error) {
	result := make([]openapi.City, len(s))
	for i, v := range s {
		result[i], err = v.ToOpenAPI()
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

func (e *City) ToOpenAPI() (t openapi.City, err error) {
	t.Name = e.Name
	t.RequiredEnum = openapi.CityRequiredEnum(e.RequiredEnum)
	if e.NullableEnum != nil {
		t.NullableEnum.SetTo(openapi.CityNullableEnum(*e.NullableEnum))
	}
	return t, nil
}

type UserSlice []*User

func (s UserSlice) ToOpenAPI() (_ []openapi.User, err error) {
	result := make([]openapi.User, len(s))
	for i, v := range s {
		result[i], err = v.ToOpenAPI()
		if err != nil {
			return nil, err
		}
	}

	return result, nil
}

func (e *User) ToOpenAPI() (t openapi.User, err error) {
	t.ID = e.ID
	t.FirstName = e.FirstName
	t.LastName = e.LastName
	t.Username = e.UserName
	if e.OptionalNullableBool != nil {
		t.OptionalNullableBool.SetTo(*e.OptionalNullableBool)
	}
	// Edge 'city'.
	{
		v, err := e.Edges.CityOrErr()
		if err != nil {
			return t, fmt.Errorf("load 'city' edge: %w", err)
		}
		t.City, err = v.ToOpenAPI()
		if err != nil {
			return t, fmt.Errorf("convert 'city' type: %w", err)
		}
	}
	// Edge 'friend_list'.
	{
		v, err := e.Edges.FriendListOrErr()
		if err != nil {
			return t, fmt.Errorf("load 'friend_list' edge: %w", err)
		}
		t.Friends, err = UserSlice(v).ToOpenAPI()
		if err != nil {
			return t, fmt.Errorf("convert 'friend_list' edge: %w", err)
		}
	}
	return t, nil
}
