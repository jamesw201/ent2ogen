{{ define "mappers" }}
{{ template "header" $ }}

{{- $cfg := $.Config.Annotations.Ent2ogen }}

import openapi "{{ $cfg.OgenPackage }}"

{{- range $_, $m := $cfg.Mappings }}

type {{ $m.DBType.Name }}Slice []*{{ $m.DBType.Name }}

{{ $m.Comment }}
func (s {{ $m.DBType.Name }}Slice) ToOpenAPI() (_ []openapi.{{ $m.APIType.Name }}, err error) {
    result := make([]openapi.{{ $m.APIType.Name }}, len(s))
    for i, v := range s {
        result[i], err = v.ToOpenAPI()
        if err != nil {
            return nil, err
        }
    }

    return result, nil
}

{{ $m.Comment }}
func (e *{{ $m.DBType.Name }}) ToOpenAPI() (t openapi.{{ $m.APIType.Name }}, err error) {
    {{- range $fm := $m.FieldMappings }}
        {{- if $fm.DBField.Nillable }}
        if e.{{ $fm.DBField.StructField }} != nil {
            {{ assign $fm.APIField $fm.DBField }}
        }
        {{- else }}
        {{ assign $fm.APIField $fm.DBField }}
        {{- end }}
    {{- end }}

    {{- range $em := $m.EdgeMappings }}
    // Edge '{{ $em.DBEdge.Name }}'.
    {
        v, err := e.Edges.{{ $em.DBEdge.StructField }}OrErr()
        if err == nil {
            {{- if $em.DBEdge.Unique }}
                converted, err := v.ToOpenAPI()
            {{- else }}
                converted, err := {{ $em.DBEdge.Type.Name }}Slice(v).ToOpenAPI()
            {{- end }}
            if err != nil {
                return t, fmt.Errorf("convert '{{ $em.DBEdge.Name }}' edge: %w", err)
            }

            {{- if $em.DBEdge.Optional }}
                {{- if $em.DBEdge.Unique }}
                t.{{ $em.APIField.Name }}.SetTo(converted)
                {{- else }}
                t.{{ $em.APIField.Name }} = converted
                {{- end }}
            {{- else }}
                t.{{ $em.APIField.Name }} = converted
            {{- end }}
        } else {{ if $em.DBEdge.Optional }}if !IsNotFound(err){{ end }} {
            return t, fmt.Errorf("load '{{ $em.DBEdge.Name }}' edge: %w", err)
        }
    }
    {{- end }}
    return t, nil
}

{{ end }}
{{- end }}