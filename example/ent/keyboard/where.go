// Code generated by ent, DO NOT EDIT.

package keyboard

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/jamesw201/go-starter/example/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldName, v))
}

// Price applies equality check predicate on the "price" field. It's identical to PriceEQ.
func Price(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldPrice, v))
}

// Discount applies equality check predicate on the "discount" field. It's identical to DiscountEQ.
func Discount(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldDiscount, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldContainsFold(FieldName, v))
}

// PriceEQ applies the EQ predicate on the "price" field.
func PriceEQ(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldPrice, v))
}

// PriceNEQ applies the NEQ predicate on the "price" field.
func PriceNEQ(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNEQ(FieldPrice, v))
}

// PriceIn applies the In predicate on the "price" field.
func PriceIn(vs ...int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldIn(FieldPrice, vs...))
}

// PriceNotIn applies the NotIn predicate on the "price" field.
func PriceNotIn(vs ...int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNotIn(FieldPrice, vs...))
}

// PriceGT applies the GT predicate on the "price" field.
func PriceGT(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGT(FieldPrice, v))
}

// PriceGTE applies the GTE predicate on the "price" field.
func PriceGTE(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGTE(FieldPrice, v))
}

// PriceLT applies the LT predicate on the "price" field.
func PriceLT(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLT(FieldPrice, v))
}

// PriceLTE applies the LTE predicate on the "price" field.
func PriceLTE(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLTE(FieldPrice, v))
}

// DiscountEQ applies the EQ predicate on the "discount" field.
func DiscountEQ(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldEQ(FieldDiscount, v))
}

// DiscountNEQ applies the NEQ predicate on the "discount" field.
func DiscountNEQ(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNEQ(FieldDiscount, v))
}

// DiscountIn applies the In predicate on the "discount" field.
func DiscountIn(vs ...int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldIn(FieldDiscount, vs...))
}

// DiscountNotIn applies the NotIn predicate on the "discount" field.
func DiscountNotIn(vs ...int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNotIn(FieldDiscount, vs...))
}

// DiscountGT applies the GT predicate on the "discount" field.
func DiscountGT(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGT(FieldDiscount, v))
}

// DiscountGTE applies the GTE predicate on the "discount" field.
func DiscountGTE(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldGTE(FieldDiscount, v))
}

// DiscountLT applies the LT predicate on the "discount" field.
func DiscountLT(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLT(FieldDiscount, v))
}

// DiscountLTE applies the LTE predicate on the "discount" field.
func DiscountLTE(v int64) predicate.Keyboard {
	return predicate.Keyboard(sql.FieldLTE(FieldDiscount, v))
}

// DiscountIsNil applies the IsNil predicate on the "discount" field.
func DiscountIsNil() predicate.Keyboard {
	return predicate.Keyboard(sql.FieldIsNull(FieldDiscount))
}

// DiscountNotNil applies the NotNil predicate on the "discount" field.
func DiscountNotNil() predicate.Keyboard {
	return predicate.Keyboard(sql.FieldNotNull(FieldDiscount))
}

// HasSwitches applies the HasEdge predicate on the "switches" edge.
func HasSwitches() predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SwitchesTable, SwitchesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSwitchesWith applies the HasEdge predicate on the "switches" edge with a given conditions (other predicates).
func HasSwitchesWith(preds ...predicate.SwitchModel) predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		step := newSwitchesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasKeycaps applies the HasEdge predicate on the "keycaps" edge.
func HasKeycaps() predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, KeycapsTable, KeycapsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasKeycapsWith applies the HasEdge predicate on the "keycaps" edge with a given conditions (other predicates).
func HasKeycapsWith(preds ...predicate.KeycapModel) predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		step := newKeycapsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Keyboard) predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Keyboard) predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Keyboard) predicate.Keyboard {
	return predicate.Keyboard(func(s *sql.Selector) {
		p(s.Not())
	})
}
