// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogen-go/ent2ogen/example/ent/keyboard"
	"github.com/ogen-go/ent2ogen/example/ent/keycapmodel"
	"github.com/ogen-go/ent2ogen/example/ent/predicate"
	"github.com/ogen-go/ent2ogen/example/ent/switchmodel"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeKeyboard    = "Keyboard"
	TypeKeycapModel = "KeycapModel"
	TypeSwitchModel = "SwitchModel"
)

// KeyboardMutation represents an operation that mutates the Keyboard nodes in the graph.
type KeyboardMutation struct {
	config
	op              Op
	typ             string
	id              *int64
	name            *string
	price           *int64
	addprice        *int64
	discount        *int64
	adddiscount     *int64
	clearedFields   map[string]struct{}
	switches        *int64
	clearedswitches bool
	keycaps         *int64
	clearedkeycaps  bool
	done            bool
	oldValue        func(context.Context) (*Keyboard, error)
	predicates      []predicate.Keyboard
}

var _ ent.Mutation = (*KeyboardMutation)(nil)

// keyboardOption allows management of the mutation configuration using functional options.
type keyboardOption func(*KeyboardMutation)

// newKeyboardMutation creates new mutation for the Keyboard entity.
func newKeyboardMutation(c config, op Op, opts ...keyboardOption) *KeyboardMutation {
	m := &KeyboardMutation{
		config:        c,
		op:            op,
		typ:           TypeKeyboard,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeyboardID sets the ID field of the mutation.
func withKeyboardID(id int64) keyboardOption {
	return func(m *KeyboardMutation) {
		var (
			err   error
			once  sync.Once
			value *Keyboard
		)
		m.oldValue = func(ctx context.Context) (*Keyboard, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Keyboard.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKeyboard sets the old Keyboard of the mutation.
func withKeyboard(node *Keyboard) keyboardOption {
	return func(m *KeyboardMutation) {
		m.oldValue = func(context.Context) (*Keyboard, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeyboardMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeyboardMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Keyboard entities.
func (m *KeyboardMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KeyboardMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KeyboardMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Keyboard.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *KeyboardMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *KeyboardMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Keyboard entity.
// If the Keyboard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyboardMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *KeyboardMutation) ResetName() {
	m.name = nil
}

// SetPrice sets the "price" field.
func (m *KeyboardMutation) SetPrice(i int64) {
	m.price = &i
	m.addprice = nil
}

// Price returns the value of the "price" field in the mutation.
func (m *KeyboardMutation) Price() (r int64, exists bool) {
	v := m.price
	if v == nil {
		return
	}
	return *v, true
}

// OldPrice returns the old "price" field's value of the Keyboard entity.
// If the Keyboard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyboardMutation) OldPrice(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPrice: %w", err)
	}
	return oldValue.Price, nil
}

// AddPrice adds i to the "price" field.
func (m *KeyboardMutation) AddPrice(i int64) {
	if m.addprice != nil {
		*m.addprice += i
	} else {
		m.addprice = &i
	}
}

// AddedPrice returns the value that was added to the "price" field in this mutation.
func (m *KeyboardMutation) AddedPrice() (r int64, exists bool) {
	v := m.addprice
	if v == nil {
		return
	}
	return *v, true
}

// ResetPrice resets all changes to the "price" field.
func (m *KeyboardMutation) ResetPrice() {
	m.price = nil
	m.addprice = nil
}

// SetDiscount sets the "discount" field.
func (m *KeyboardMutation) SetDiscount(i int64) {
	m.discount = &i
	m.adddiscount = nil
}

// Discount returns the value of the "discount" field in the mutation.
func (m *KeyboardMutation) Discount() (r int64, exists bool) {
	v := m.discount
	if v == nil {
		return
	}
	return *v, true
}

// OldDiscount returns the old "discount" field's value of the Keyboard entity.
// If the Keyboard object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeyboardMutation) OldDiscount(ctx context.Context) (v *int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDiscount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDiscount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDiscount: %w", err)
	}
	return oldValue.Discount, nil
}

// AddDiscount adds i to the "discount" field.
func (m *KeyboardMutation) AddDiscount(i int64) {
	if m.adddiscount != nil {
		*m.adddiscount += i
	} else {
		m.adddiscount = &i
	}
}

// AddedDiscount returns the value that was added to the "discount" field in this mutation.
func (m *KeyboardMutation) AddedDiscount() (r int64, exists bool) {
	v := m.adddiscount
	if v == nil {
		return
	}
	return *v, true
}

// ClearDiscount clears the value of the "discount" field.
func (m *KeyboardMutation) ClearDiscount() {
	m.discount = nil
	m.adddiscount = nil
	m.clearedFields[keyboard.FieldDiscount] = struct{}{}
}

// DiscountCleared returns if the "discount" field was cleared in this mutation.
func (m *KeyboardMutation) DiscountCleared() bool {
	_, ok := m.clearedFields[keyboard.FieldDiscount]
	return ok
}

// ResetDiscount resets all changes to the "discount" field.
func (m *KeyboardMutation) ResetDiscount() {
	m.discount = nil
	m.adddiscount = nil
	delete(m.clearedFields, keyboard.FieldDiscount)
}

// SetSwitchesID sets the "switches" edge to the SwitchModel entity by id.
func (m *KeyboardMutation) SetSwitchesID(id int64) {
	m.switches = &id
}

// ClearSwitches clears the "switches" edge to the SwitchModel entity.
func (m *KeyboardMutation) ClearSwitches() {
	m.clearedswitches = true
}

// SwitchesCleared reports if the "switches" edge to the SwitchModel entity was cleared.
func (m *KeyboardMutation) SwitchesCleared() bool {
	return m.clearedswitches
}

// SwitchesID returns the "switches" edge ID in the mutation.
func (m *KeyboardMutation) SwitchesID() (id int64, exists bool) {
	if m.switches != nil {
		return *m.switches, true
	}
	return
}

// SwitchesIDs returns the "switches" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SwitchesID instead. It exists only for internal usage by the builders.
func (m *KeyboardMutation) SwitchesIDs() (ids []int64) {
	if id := m.switches; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSwitches resets all changes to the "switches" edge.
func (m *KeyboardMutation) ResetSwitches() {
	m.switches = nil
	m.clearedswitches = false
}

// SetKeycapsID sets the "keycaps" edge to the KeycapModel entity by id.
func (m *KeyboardMutation) SetKeycapsID(id int64) {
	m.keycaps = &id
}

// ClearKeycaps clears the "keycaps" edge to the KeycapModel entity.
func (m *KeyboardMutation) ClearKeycaps() {
	m.clearedkeycaps = true
}

// KeycapsCleared reports if the "keycaps" edge to the KeycapModel entity was cleared.
func (m *KeyboardMutation) KeycapsCleared() bool {
	return m.clearedkeycaps
}

// KeycapsID returns the "keycaps" edge ID in the mutation.
func (m *KeyboardMutation) KeycapsID() (id int64, exists bool) {
	if m.keycaps != nil {
		return *m.keycaps, true
	}
	return
}

// KeycapsIDs returns the "keycaps" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// KeycapsID instead. It exists only for internal usage by the builders.
func (m *KeyboardMutation) KeycapsIDs() (ids []int64) {
	if id := m.keycaps; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetKeycaps resets all changes to the "keycaps" edge.
func (m *KeyboardMutation) ResetKeycaps() {
	m.keycaps = nil
	m.clearedkeycaps = false
}

// Where appends a list predicates to the KeyboardMutation builder.
func (m *KeyboardMutation) Where(ps ...predicate.Keyboard) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KeyboardMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KeyboardMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Keyboard, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KeyboardMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KeyboardMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Keyboard).
func (m *KeyboardMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeyboardMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, keyboard.FieldName)
	}
	if m.price != nil {
		fields = append(fields, keyboard.FieldPrice)
	}
	if m.discount != nil {
		fields = append(fields, keyboard.FieldDiscount)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeyboardMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case keyboard.FieldName:
		return m.Name()
	case keyboard.FieldPrice:
		return m.Price()
	case keyboard.FieldDiscount:
		return m.Discount()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeyboardMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case keyboard.FieldName:
		return m.OldName(ctx)
	case keyboard.FieldPrice:
		return m.OldPrice(ctx)
	case keyboard.FieldDiscount:
		return m.OldDiscount(ctx)
	}
	return nil, fmt.Errorf("unknown Keyboard field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeyboardMutation) SetField(name string, value ent.Value) error {
	switch name {
	case keyboard.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case keyboard.FieldPrice:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPrice(v)
		return nil
	case keyboard.FieldDiscount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDiscount(v)
		return nil
	}
	return fmt.Errorf("unknown Keyboard field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeyboardMutation) AddedFields() []string {
	var fields []string
	if m.addprice != nil {
		fields = append(fields, keyboard.FieldPrice)
	}
	if m.adddiscount != nil {
		fields = append(fields, keyboard.FieldDiscount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeyboardMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case keyboard.FieldPrice:
		return m.AddedPrice()
	case keyboard.FieldDiscount:
		return m.AddedDiscount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeyboardMutation) AddField(name string, value ent.Value) error {
	switch name {
	case keyboard.FieldPrice:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPrice(v)
		return nil
	case keyboard.FieldDiscount:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDiscount(v)
		return nil
	}
	return fmt.Errorf("unknown Keyboard numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeyboardMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(keyboard.FieldDiscount) {
		fields = append(fields, keyboard.FieldDiscount)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeyboardMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeyboardMutation) ClearField(name string) error {
	switch name {
	case keyboard.FieldDiscount:
		m.ClearDiscount()
		return nil
	}
	return fmt.Errorf("unknown Keyboard nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeyboardMutation) ResetField(name string) error {
	switch name {
	case keyboard.FieldName:
		m.ResetName()
		return nil
	case keyboard.FieldPrice:
		m.ResetPrice()
		return nil
	case keyboard.FieldDiscount:
		m.ResetDiscount()
		return nil
	}
	return fmt.Errorf("unknown Keyboard field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeyboardMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.switches != nil {
		edges = append(edges, keyboard.EdgeSwitches)
	}
	if m.keycaps != nil {
		edges = append(edges, keyboard.EdgeKeycaps)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeyboardMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case keyboard.EdgeSwitches:
		if id := m.switches; id != nil {
			return []ent.Value{*id}
		}
	case keyboard.EdgeKeycaps:
		if id := m.keycaps; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeyboardMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeyboardMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeyboardMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedswitches {
		edges = append(edges, keyboard.EdgeSwitches)
	}
	if m.clearedkeycaps {
		edges = append(edges, keyboard.EdgeKeycaps)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeyboardMutation) EdgeCleared(name string) bool {
	switch name {
	case keyboard.EdgeSwitches:
		return m.clearedswitches
	case keyboard.EdgeKeycaps:
		return m.clearedkeycaps
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeyboardMutation) ClearEdge(name string) error {
	switch name {
	case keyboard.EdgeSwitches:
		m.ClearSwitches()
		return nil
	case keyboard.EdgeKeycaps:
		m.ClearKeycaps()
		return nil
	}
	return fmt.Errorf("unknown Keyboard unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeyboardMutation) ResetEdge(name string) error {
	switch name {
	case keyboard.EdgeSwitches:
		m.ResetSwitches()
		return nil
	case keyboard.EdgeKeycaps:
		m.ResetKeycaps()
		return nil
	}
	return fmt.Errorf("unknown Keyboard edge %s", name)
}

// KeycapModelMutation represents an operation that mutates the KeycapModel nodes in the graph.
type KeycapModelMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	profile       *string
	material      *keycapmodel.Material
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*KeycapModel, error)
	predicates    []predicate.KeycapModel
}

var _ ent.Mutation = (*KeycapModelMutation)(nil)

// keycapmodelOption allows management of the mutation configuration using functional options.
type keycapmodelOption func(*KeycapModelMutation)

// newKeycapModelMutation creates new mutation for the KeycapModel entity.
func newKeycapModelMutation(c config, op Op, opts ...keycapmodelOption) *KeycapModelMutation {
	m := &KeycapModelMutation{
		config:        c,
		op:            op,
		typ:           TypeKeycapModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withKeycapModelID sets the ID field of the mutation.
func withKeycapModelID(id int64) keycapmodelOption {
	return func(m *KeycapModelMutation) {
		var (
			err   error
			once  sync.Once
			value *KeycapModel
		)
		m.oldValue = func(ctx context.Context) (*KeycapModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().KeycapModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withKeycapModel sets the old KeycapModel of the mutation.
func withKeycapModel(node *KeycapModel) keycapmodelOption {
	return func(m *KeycapModelMutation) {
		m.oldValue = func(context.Context) (*KeycapModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m KeycapModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m KeycapModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of KeycapModel entities.
func (m *KeycapModelMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *KeycapModelMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *KeycapModelMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().KeycapModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *KeycapModelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *KeycapModelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the KeycapModel entity.
// If the KeycapModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeycapModelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *KeycapModelMutation) ResetName() {
	m.name = nil
}

// SetProfile sets the "profile" field.
func (m *KeycapModelMutation) SetProfile(s string) {
	m.profile = &s
}

// Profile returns the value of the "profile" field in the mutation.
func (m *KeycapModelMutation) Profile() (r string, exists bool) {
	v := m.profile
	if v == nil {
		return
	}
	return *v, true
}

// OldProfile returns the old "profile" field's value of the KeycapModel entity.
// If the KeycapModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeycapModelMutation) OldProfile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProfile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProfile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProfile: %w", err)
	}
	return oldValue.Profile, nil
}

// ResetProfile resets all changes to the "profile" field.
func (m *KeycapModelMutation) ResetProfile() {
	m.profile = nil
}

// SetMaterial sets the "material" field.
func (m *KeycapModelMutation) SetMaterial(k keycapmodel.Material) {
	m.material = &k
}

// Material returns the value of the "material" field in the mutation.
func (m *KeycapModelMutation) Material() (r keycapmodel.Material, exists bool) {
	v := m.material
	if v == nil {
		return
	}
	return *v, true
}

// OldMaterial returns the old "material" field's value of the KeycapModel entity.
// If the KeycapModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *KeycapModelMutation) OldMaterial(ctx context.Context) (v keycapmodel.Material, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMaterial is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMaterial requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMaterial: %w", err)
	}
	return oldValue.Material, nil
}

// ResetMaterial resets all changes to the "material" field.
func (m *KeycapModelMutation) ResetMaterial() {
	m.material = nil
}

// Where appends a list predicates to the KeycapModelMutation builder.
func (m *KeycapModelMutation) Where(ps ...predicate.KeycapModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the KeycapModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *KeycapModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.KeycapModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *KeycapModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *KeycapModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (KeycapModel).
func (m *KeycapModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *KeycapModelMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, keycapmodel.FieldName)
	}
	if m.profile != nil {
		fields = append(fields, keycapmodel.FieldProfile)
	}
	if m.material != nil {
		fields = append(fields, keycapmodel.FieldMaterial)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *KeycapModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case keycapmodel.FieldName:
		return m.Name()
	case keycapmodel.FieldProfile:
		return m.Profile()
	case keycapmodel.FieldMaterial:
		return m.Material()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *KeycapModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case keycapmodel.FieldName:
		return m.OldName(ctx)
	case keycapmodel.FieldProfile:
		return m.OldProfile(ctx)
	case keycapmodel.FieldMaterial:
		return m.OldMaterial(ctx)
	}
	return nil, fmt.Errorf("unknown KeycapModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeycapModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case keycapmodel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case keycapmodel.FieldProfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProfile(v)
		return nil
	case keycapmodel.FieldMaterial:
		v, ok := value.(keycapmodel.Material)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMaterial(v)
		return nil
	}
	return fmt.Errorf("unknown KeycapModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *KeycapModelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *KeycapModelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *KeycapModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown KeycapModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *KeycapModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *KeycapModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *KeycapModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown KeycapModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *KeycapModelMutation) ResetField(name string) error {
	switch name {
	case keycapmodel.FieldName:
		m.ResetName()
		return nil
	case keycapmodel.FieldProfile:
		m.ResetProfile()
		return nil
	case keycapmodel.FieldMaterial:
		m.ResetMaterial()
		return nil
	}
	return fmt.Errorf("unknown KeycapModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *KeycapModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *KeycapModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *KeycapModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *KeycapModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *KeycapModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *KeycapModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *KeycapModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown KeycapModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *KeycapModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown KeycapModel edge %s", name)
}

// SwitchModelMutation represents an operation that mutates the SwitchModel nodes in the graph.
type SwitchModelMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	name          *string
	switch_type   *switchmodel.SwitchType
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SwitchModel, error)
	predicates    []predicate.SwitchModel
}

var _ ent.Mutation = (*SwitchModelMutation)(nil)

// switchmodelOption allows management of the mutation configuration using functional options.
type switchmodelOption func(*SwitchModelMutation)

// newSwitchModelMutation creates new mutation for the SwitchModel entity.
func newSwitchModelMutation(c config, op Op, opts ...switchmodelOption) *SwitchModelMutation {
	m := &SwitchModelMutation{
		config:        c,
		op:            op,
		typ:           TypeSwitchModel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSwitchModelID sets the ID field of the mutation.
func withSwitchModelID(id int64) switchmodelOption {
	return func(m *SwitchModelMutation) {
		var (
			err   error
			once  sync.Once
			value *SwitchModel
		)
		m.oldValue = func(ctx context.Context) (*SwitchModel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SwitchModel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSwitchModel sets the old SwitchModel of the mutation.
func withSwitchModel(node *SwitchModel) switchmodelOption {
	return func(m *SwitchModelMutation) {
		m.oldValue = func(context.Context) (*SwitchModel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SwitchModelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SwitchModelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SwitchModel entities.
func (m *SwitchModelMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SwitchModelMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SwitchModelMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SwitchModel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *SwitchModelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *SwitchModelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the SwitchModel entity.
// If the SwitchModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwitchModelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *SwitchModelMutation) ResetName() {
	m.name = nil
}

// SetSwitchType sets the "switch_type" field.
func (m *SwitchModelMutation) SetSwitchType(st switchmodel.SwitchType) {
	m.switch_type = &st
}

// SwitchType returns the value of the "switch_type" field in the mutation.
func (m *SwitchModelMutation) SwitchType() (r switchmodel.SwitchType, exists bool) {
	v := m.switch_type
	if v == nil {
		return
	}
	return *v, true
}

// OldSwitchType returns the old "switch_type" field's value of the SwitchModel entity.
// If the SwitchModel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SwitchModelMutation) OldSwitchType(ctx context.Context) (v switchmodel.SwitchType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSwitchType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSwitchType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSwitchType: %w", err)
	}
	return oldValue.SwitchType, nil
}

// ResetSwitchType resets all changes to the "switch_type" field.
func (m *SwitchModelMutation) ResetSwitchType() {
	m.switch_type = nil
}

// Where appends a list predicates to the SwitchModelMutation builder.
func (m *SwitchModelMutation) Where(ps ...predicate.SwitchModel) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SwitchModelMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SwitchModelMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SwitchModel, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SwitchModelMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SwitchModelMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SwitchModel).
func (m *SwitchModelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SwitchModelMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, switchmodel.FieldName)
	}
	if m.switch_type != nil {
		fields = append(fields, switchmodel.FieldSwitchType)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SwitchModelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case switchmodel.FieldName:
		return m.Name()
	case switchmodel.FieldSwitchType:
		return m.SwitchType()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SwitchModelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case switchmodel.FieldName:
		return m.OldName(ctx)
	case switchmodel.FieldSwitchType:
		return m.OldSwitchType(ctx)
	}
	return nil, fmt.Errorf("unknown SwitchModel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SwitchModelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case switchmodel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case switchmodel.FieldSwitchType:
		v, ok := value.(switchmodel.SwitchType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSwitchType(v)
		return nil
	}
	return fmt.Errorf("unknown SwitchModel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SwitchModelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SwitchModelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SwitchModelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SwitchModel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SwitchModelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SwitchModelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SwitchModelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SwitchModel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SwitchModelMutation) ResetField(name string) error {
	switch name {
	case switchmodel.FieldName:
		m.ResetName()
		return nil
	case switchmodel.FieldSwitchType:
		m.ResetSwitchType()
		return nil
	}
	return fmt.Errorf("unknown SwitchModel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SwitchModelMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SwitchModelMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SwitchModelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SwitchModelMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SwitchModelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SwitchModelMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SwitchModelMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SwitchModel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SwitchModelMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SwitchModel edge %s", name)
}
