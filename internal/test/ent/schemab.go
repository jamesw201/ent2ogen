// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ogen-go/ent2ogen/internal/test/ent/schemab"
)

// SchemaB is the model entity for the SchemaB schema.
type SchemaB struct {
	config
	// ID of the ent.
	ID                   int64 `json:"id,omitempty"`
	schemaa_edge_schemab *int
	selectValues         sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SchemaB) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case schemab.FieldID:
			values[i] = new(sql.NullInt64)
		case schemab.ForeignKeys[0]: // schemaa_edge_schemab
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SchemaB fields.
func (s *SchemaB) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case schemab.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int64(value.Int64)
		case schemab.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field schemaa_edge_schemab", value)
			} else if value.Valid {
				s.schemaa_edge_schemab = new(int)
				*s.schemaa_edge_schemab = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SchemaB.
// This includes values selected through modifiers, order, etc.
func (s *SchemaB) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this SchemaB.
// Note that you need to call SchemaB.Unwrap() before calling this method if this SchemaB
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *SchemaB) Update() *SchemaBUpdateOne {
	return NewSchemaBClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the SchemaB entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *SchemaB) Unwrap() *SchemaB {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: SchemaB is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *SchemaB) String() string {
	var builder strings.Builder
	builder.WriteString("SchemaB(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SchemaBs is a parsable slice of SchemaB.
type SchemaBs []*SchemaB
