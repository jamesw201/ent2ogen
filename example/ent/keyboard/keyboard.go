// Code generated by ent, DO NOT EDIT.

package keyboard

const (
	// Label holds the string label denoting the keyboard type in the database.
	Label = "keyboard"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPrice holds the string denoting the price field in the database.
	FieldPrice = "price"
	// FieldDiscount holds the string denoting the discount field in the database.
	FieldDiscount = "discount"
	// EdgeSwitches holds the string denoting the switches edge name in mutations.
	EdgeSwitches = "switches"
	// EdgeKeycaps holds the string denoting the keycaps edge name in mutations.
	EdgeKeycaps = "keycaps"
	// Table holds the table name of the keyboard in the database.
	Table = "keyboards"
	// SwitchesTable is the table that holds the switches relation/edge.
	SwitchesTable = "keyboards"
	// SwitchesInverseTable is the table name for the SwitchModel entity.
	// It exists in this package in order to avoid circular dependency with the "switchmodel" package.
	SwitchesInverseTable = "switch_models"
	// SwitchesColumn is the table column denoting the switches relation/edge.
	SwitchesColumn = "keyboard_switches"
	// KeycapsTable is the table that holds the keycaps relation/edge.
	KeycapsTable = "keyboards"
	// KeycapsInverseTable is the table name for the KeycapModel entity.
	// It exists in this package in order to avoid circular dependency with the "keycapmodel" package.
	KeycapsInverseTable = "keycap_models"
	// KeycapsColumn is the table column denoting the keycaps relation/edge.
	KeycapsColumn = "keyboard_keycaps"
)

// Columns holds all SQL columns for keyboard fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldPrice,
	FieldDiscount,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "keyboards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"keyboard_switches",
	"keyboard_keycaps",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)
