{{ define "mappers" }}
{{ template "header" $ }}

{{- $cfg := $.Config.Annotations.Ent2ogen }}

import openapi "{{ $cfg.OgenPackage }}"

{{- range $_, $m := $cfg.Mappings }}

type {{ $m.From.Name }}Slice []*{{ $m.From.Name }}

func (s {{ $m.From.Name }}Slice) ToOpenAPI() (_ []openapi.{{ $m.To.Name }}, err error) {
    result := make([]openapi.{{ $m.To.Name }}, len(s))
    for i, v := range s {
        result[i], err = v.ToOpenAPI()
        if err != nil {
            return nil, err
        }
    }

    return result, nil
}

func (e *{{ $m.From.Name }}) ToOpenAPI() (t openapi.{{ $m.To.Name }}, err error) {
    {{- range $f := $m.FieldMappings }}
        {{- $entField  := $f.From }}
        {{- $ogenField := $f.To }}

        {{- if $entField.Nillable }}
        if e.{{ $entField.StructField }} != nil {
            t.{{ $ogenField.Name }}.SetTo(*e.{{ $entField.StructField }})
        }
        {{- else }}
        t.{{ $ogenField.Name }} = e.{{ $entField.StructField }}
        {{- end }}
    {{- end }}

    {{- range $e := $m.EdgeMappings }}
    // Edge '{{ $e.From.Name }}'.
    {
        {{- $edge  := $e.From }}
        {{- $field := $e.To }}
        v, err := e.Edges.{{ $edge.StructField }}OrErr()
        if err != nil {
            return t, fmt.Errorf("load '{{ $edge.Name }}' edge: %w", err)
        }

        {{- if $edge.Unique }}
            t.{{ $field.Name }}, err = v.ToOpenAPI()
            if err != nil {
                return t, fmt.Errorf("convert '{{ $edge.Name }}' type: %w", err)
            }
        {{- else }}
            t.{{ $field.Name }}, err = {{ $edge.Type.Name }}Slice(v).ToOpenAPI()
            if err != nil {
                return t, fmt.Errorf("convert '{{ $edge.Name }}' edge: %w", err)
            }
        {{- end }}
    }
    {{- end }}
    return t, nil
}

{{ end }}
{{- end }}