// Code generated by ent, DO NOT EDIT.

package handler

import (
	"github.com/jamesw201/go-starter/example/api"
	"github.com/jamesw201/go-starter/example/ent"
)

func NewKeyboardCreate(e *ent.Keyboard) *api.Keyboard {
  if e == nil {
    return nil
  }
  var ret api.Keyboard
  ret.ID = e.ID
  ret.Name = e.Name
  return &ret
}

func NewKeyboardRead(e *ent.Keyboard, sw *ent.SwitchModel, kc *ent.KeycapModel) (*api.Keyboard, error) {
	// if e == nil {
	// 	return nil, e
	// }
  // en, err := e.ToOpenAPI()
  // if err != nil {
  //   return nil
  // }
	// return en, err
  swoas, err := sw.ToOpenAPI()
  if err != nil {
    return nil, err
  }
  kcoas, kcerr := kc.ToOpenAPI()
  if kcerr != nil {
    return nil, kcerr
  }

	var ret api.Keyboard
	ret.ID = e.ID
	ret.Name = e.Name
  ret.SetSwitches(*swoas)
  ret.SetKeycaps(*kcoas)
  return &ret, nil
}

// func NewCustomerCreate(e *ent.Customer) *CustomerCreate {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret CustomerCreate
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Location = e.Location
// 	return &ret
// }

// func NewCustomerCreates(es []*ent.Customer) []CustomerCreate {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]CustomerCreate, len(es))
// 	for i, e := range es {
// 		r[i] = NewCustomerCreate(e).Elem()
// 	}
// 	return r
// }

// func (c *CustomerCreate) Elem() CustomerCreate {
// 	if c == nil {
// 		return CustomerCreate{}
// 	}
// 	return *c
// }

// func NewCustomerList(e *ent.Customer) *CustomerList {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret CustomerList
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Location = e.Location
// 	return &ret
// }

// func NewCustomerLists(es []*ent.Customer) []CustomerList {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]CustomerList, len(es))
// 	for i, e := range es {
// 		r[i] = NewCustomerList(e).Elem()
// 	}
// 	return r
// }

// func (c *CustomerList) Elem() CustomerList {
// 	if c == nil {
// 		return CustomerList{}
// 	}
// 	return *c
// }



// func NewCustomerReads(es []*ent.Customer) []CustomerRead {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]CustomerRead, len(es))
// 	for i, e := range es {
// 		r[i] = NewCustomerRead(e).Elem()
// 	}
// 	return r
// }

// func (c *CustomerRead) Elem() CustomerRead {
// 	if c == nil {
// 		return CustomerRead{}
// 	}
// 	return *c
// }

// func NewCustomerUpdate(e *ent.Customer) *CustomerUpdate {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret CustomerUpdate
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Location = e.Location
// 	return &ret
// }

// func NewCustomerUpdates(es []*ent.Customer) []CustomerUpdate {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]CustomerUpdate, len(es))
// 	for i, e := range es {
// 		r[i] = NewCustomerUpdate(e).Elem()
// 	}
// 	return r
// }

// func (c *CustomerUpdate) Elem() CustomerUpdate {
// 	if c == nil {
// 		return CustomerUpdate{}
// 	}
// 	return *c
// }

// func NewCustomerProductsList(e *ent.Product) *CustomerProductsList {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret CustomerProductsList
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Price = e.Price
// 	ret.Currency = e.Currency
// 	return &ret
// }

// func NewCustomerProductsLists(es []*ent.Product) []CustomerProductsList {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]CustomerProductsList, len(es))
// 	for i, e := range es {
// 		r[i] = NewCustomerProductsList(e).Elem()
// 	}
// 	return r
// }

// func (pr *CustomerProductsList) Elem() CustomerProductsList {
// 	if pr == nil {
// 		return CustomerProductsList{}
// 	}
// 	return *pr
// }

// func NewProductCreate(e *ent.Product) *ProductCreate {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret ProductCreate
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Price = e.Price
// 	ret.Currency = e.Currency
// 	return &ret
// }

// func NewProductCreates(es []*ent.Product) []ProductCreate {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]ProductCreate, len(es))
// 	for i, e := range es {
// 		r[i] = NewProductCreate(e).Elem()
// 	}
// 	return r
// }

// func (pr *ProductCreate) Elem() ProductCreate {
// 	if pr == nil {
// 		return ProductCreate{}
// 	}
// 	return *pr
// }

// func NewProductList(e *ent.Product) *ProductList {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret ProductList
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Price = e.Price
// 	ret.Currency = e.Currency
// 	return &ret
// }

// func NewProductLists(es []*ent.Product) []ProductList {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]ProductList, len(es))
// 	for i, e := range es {
// 		r[i] = NewProductList(e).Elem()
// 	}
// 	return r
// }

// func (pr *ProductList) Elem() ProductList {
// 	if pr == nil {
// 		return ProductList{}
// 	}
// 	return *pr
// }

// func NewProductRead(e *ent.Product) *ProductRead {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret ProductRead
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Price = e.Price
// 	ret.Currency = e.Currency
// 	return &ret
// }

// func NewProductReads(es []*ent.Product) []ProductRead {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]ProductRead, len(es))
// 	for i, e := range es {
// 		r[i] = NewProductRead(e).Elem()
// 	}
// 	return r
// }

// func (pr *ProductRead) Elem() ProductRead {
// 	if pr == nil {
// 		return ProductRead{}
// 	}
// 	return *pr
// }

// func NewProductUpdate(e *ent.Product) *ProductUpdate {
// 	if e == nil {
// 		return nil
// 	}
// 	var ret ProductUpdate
// 	ret.ID = e.ID
// 	ret.Name = e.Name
// 	ret.Price = e.Price
// 	ret.Currency = e.Currency
// 	return &ret
// }

// func NewProductUpdates(es []*ent.Product) []ProductUpdate {
// 	if len(es) == 0 {
// 		return nil
// 	}
// 	r := make([]ProductUpdate, len(es))
// 	for i, e := range es {
// 		r[i] = NewProductUpdate(e).Elem()
// 	}
// 	return r
// }

// func (pr *ProductUpdate) Elem() ProductUpdate {
// 	if pr == nil {
// 		return ProductUpdate{}
// 	}
// 	return *pr
// }
