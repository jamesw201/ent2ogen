// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ogen-go/ent2ogen/example/ent/predicate"
	"github.com/ogen-go/ent2ogen/example/ent/switchmodel"
)

// SwitchModelUpdate is the builder for updating SwitchModel entities.
type SwitchModelUpdate struct {
	config
	hooks    []Hook
	mutation *SwitchModelMutation
}

// Where appends a list predicates to the SwitchModelUpdate builder.
func (smu *SwitchModelUpdate) Where(ps ...predicate.SwitchModel) *SwitchModelUpdate {
	smu.mutation.Where(ps...)
	return smu
}

// SetName sets the "name" field.
func (smu *SwitchModelUpdate) SetName(s string) *SwitchModelUpdate {
	smu.mutation.SetName(s)
	return smu
}

// SetSwitchType sets the "switch_type" field.
func (smu *SwitchModelUpdate) SetSwitchType(st switchmodel.SwitchType) *SwitchModelUpdate {
	smu.mutation.SetSwitchType(st)
	return smu
}

// Mutation returns the SwitchModelMutation object of the builder.
func (smu *SwitchModelUpdate) Mutation() *SwitchModelMutation {
	return smu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (smu *SwitchModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(smu.hooks) == 0 {
		if err = smu.check(); err != nil {
			return 0, err
		}
		affected, err = smu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SwitchModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smu.check(); err != nil {
				return 0, err
			}
			smu.mutation = mutation
			affected, err = smu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(smu.hooks) - 1; i >= 0; i-- {
			if smu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (smu *SwitchModelUpdate) SaveX(ctx context.Context) int {
	affected, err := smu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (smu *SwitchModelUpdate) Exec(ctx context.Context) error {
	_, err := smu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smu *SwitchModelUpdate) ExecX(ctx context.Context) {
	if err := smu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smu *SwitchModelUpdate) check() error {
	if v, ok := smu.mutation.Name(); ok {
		if err := switchmodel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SwitchModel.name": %w`, err)}
		}
	}
	if v, ok := smu.mutation.SwitchType(); ok {
		if err := switchmodel.SwitchTypeValidator(v); err != nil {
			return &ValidationError{Name: "switch_type", err: fmt.Errorf(`ent: validator failed for field "SwitchModel.switch_type": %w`, err)}
		}
	}
	return nil
}

func (smu *SwitchModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   switchmodel.Table,
			Columns: switchmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: switchmodel.FieldID,
			},
		},
	}
	if ps := smu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smu.mutation.Name(); ok {
		_spec.SetField(switchmodel.FieldName, field.TypeString, value)
	}
	if value, ok := smu.mutation.SwitchType(); ok {
		_spec.SetField(switchmodel.FieldSwitchType, field.TypeEnum, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, smu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{switchmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SwitchModelUpdateOne is the builder for updating a single SwitchModel entity.
type SwitchModelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SwitchModelMutation
}

// SetName sets the "name" field.
func (smuo *SwitchModelUpdateOne) SetName(s string) *SwitchModelUpdateOne {
	smuo.mutation.SetName(s)
	return smuo
}

// SetSwitchType sets the "switch_type" field.
func (smuo *SwitchModelUpdateOne) SetSwitchType(st switchmodel.SwitchType) *SwitchModelUpdateOne {
	smuo.mutation.SetSwitchType(st)
	return smuo
}

// Mutation returns the SwitchModelMutation object of the builder.
func (smuo *SwitchModelUpdateOne) Mutation() *SwitchModelMutation {
	return smuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (smuo *SwitchModelUpdateOne) Select(field string, fields ...string) *SwitchModelUpdateOne {
	smuo.fields = append([]string{field}, fields...)
	return smuo
}

// Save executes the query and returns the updated SwitchModel entity.
func (smuo *SwitchModelUpdateOne) Save(ctx context.Context) (*SwitchModel, error) {
	var (
		err  error
		node *SwitchModel
	)
	if len(smuo.hooks) == 0 {
		if err = smuo.check(); err != nil {
			return nil, err
		}
		node, err = smuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SwitchModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smuo.check(); err != nil {
				return nil, err
			}
			smuo.mutation = mutation
			node, err = smuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(smuo.hooks) - 1; i >= 0; i-- {
			if smuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, smuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*SwitchModel)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SwitchModelMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (smuo *SwitchModelUpdateOne) SaveX(ctx context.Context) *SwitchModel {
	node, err := smuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (smuo *SwitchModelUpdateOne) Exec(ctx context.Context) error {
	_, err := smuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smuo *SwitchModelUpdateOne) ExecX(ctx context.Context) {
	if err := smuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smuo *SwitchModelUpdateOne) check() error {
	if v, ok := smuo.mutation.Name(); ok {
		if err := switchmodel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SwitchModel.name": %w`, err)}
		}
	}
	if v, ok := smuo.mutation.SwitchType(); ok {
		if err := switchmodel.SwitchTypeValidator(v); err != nil {
			return &ValidationError{Name: "switch_type", err: fmt.Errorf(`ent: validator failed for field "SwitchModel.switch_type": %w`, err)}
		}
	}
	return nil
}

func (smuo *SwitchModelUpdateOne) sqlSave(ctx context.Context) (_node *SwitchModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   switchmodel.Table,
			Columns: switchmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: switchmodel.FieldID,
			},
		},
	}
	id, ok := smuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SwitchModel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := smuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, switchmodel.FieldID)
		for _, f := range fields {
			if !switchmodel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != switchmodel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := smuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := smuo.mutation.Name(); ok {
		_spec.SetField(switchmodel.FieldName, field.TypeString, value)
	}
	if value, ok := smuo.mutation.SwitchType(); ok {
		_spec.SetField(switchmodel.FieldSwitchType, field.TypeEnum, value)
	}
	_node = &SwitchModel{config: smuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, smuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{switchmodel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
