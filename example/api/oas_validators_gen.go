// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *Keyboard) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Switches.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "switches",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Keycaps.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "keycaps",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s *Keycaps) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Material.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "material",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s KeycapsMaterial) Validate() error {
	switch s {
	case "ABS":
		return nil
	case "PBT":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
func (s *Switches) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.SwitchType.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "switch_type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
func (s SwitchesSwitchType) Validate() error {
	switch s {
	case "mechanical":
		return nil
	case "optical":
		return nil
	case "electrocapacitive":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
