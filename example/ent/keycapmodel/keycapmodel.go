// Code generated by ent, DO NOT EDIT.

package keycapmodel

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the keycapmodel type in the database.
	Label = "keycap_model"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldProfile holds the string denoting the profile field in the database.
	FieldProfile = "profile"
	// FieldMaterial holds the string denoting the material field in the database.
	FieldMaterial = "material"
	// Table holds the table name of the keycapmodel in the database.
	Table = "keycap_models"
)

// Columns holds all SQL columns for keycapmodel fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldProfile,
	FieldMaterial,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Material defines the type for the "material" enum field.
type Material string

// Material values.
const (
	MaterialABS Material = "ABS"
	MaterialPBT Material = "PBT"
)

func (m Material) String() string {
	return string(m)
}

// MaterialValidator is a validator for the "material" field enum values. It is called by the builders before save.
func MaterialValidator(m Material) error {
	switch m {
	case MaterialABS, MaterialPBT:
		return nil
	default:
		return fmt.Errorf("keycapmodel: invalid enum value for material field: %q", m)
	}
}

// Order defines the ordering method for the KeycapModel queries.
type Order func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByProfile orders the results by the profile field.
func ByProfile(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldProfile, opts...).ToFunc()
}

// ByMaterial orders the results by the material field.
func ByMaterial(opts ...sql.OrderTermOption) Order {
	return sql.OrderByField(FieldMaterial, opts...).ToFunc()
}
