// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/ogen-go/ent2ogen/internal/test/ent/predicate"
	"github.com/ogen-go/ent2ogen/internal/test/ent/schemaa"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeSchemaA = "SchemaA"
	TypeSchemaB = "SchemaB"
)

// SchemaAMutation represents an operation that mutates the SchemaA nodes in the graph.
type SchemaAMutation struct {
	config
	op                                            Op
	typ                                           string
	id                                            *int
	int64                                         *int64
	addint64                                      *int64
	string_bindto_foobar                          *string
	string_optional_nullable                      *string
	optional_nullable_bool                        *bool
	jsontype_strings                              *[]string
	appendjsontype_strings                        []string
	jsontype_strings_optional                     *[]string
	appendjsontype_strings_optional               []string
	jsontype_ints                                 *[]int
	appendjsontype_ints                           []int
	jsontype_ints_optional                        *[]int
	appendjsontype_ints_optional                  []int
	required_enum                                 *schemaa.RequiredEnum
	optional_nullable_enum                        *schemaa.OptionalNullableEnum
	bytes                                         *[]byte
	clearedFields                                 map[string]struct{}
	edge_schemab_unique_required                  *int64
	clearededge_schemab_unique_required           bool
	edge_schemab_unique_required_bindto_bs        *int64
	clearededge_schemab_unique_required_bindto_bs bool
	edge_schemab_unique_optional                  *int64
	clearededge_schemab_unique_optional           bool
	edge_schemab                                  map[int64]struct{}
	removededge_schemab                           map[int64]struct{}
	clearededge_schemab                           bool
	edge_schemaa_recursive                        map[int]struct{}
	removededge_schemaa_recursive                 map[int]struct{}
	clearededge_schemaa_recursive                 bool
	done                                          bool
	oldValue                                      func(context.Context) (*SchemaA, error)
	predicates                                    []predicate.SchemaA
}

var _ ent.Mutation = (*SchemaAMutation)(nil)

// schemaaOption allows management of the mutation configuration using functional options.
type schemaaOption func(*SchemaAMutation)

// newSchemaAMutation creates new mutation for the SchemaA entity.
func newSchemaAMutation(c config, op Op, opts ...schemaaOption) *SchemaAMutation {
	m := &SchemaAMutation{
		config:        c,
		op:            op,
		typ:           TypeSchemaA,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSchemaAID sets the ID field of the mutation.
func withSchemaAID(id int) schemaaOption {
	return func(m *SchemaAMutation) {
		var (
			err   error
			once  sync.Once
			value *SchemaA
		)
		m.oldValue = func(ctx context.Context) (*SchemaA, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SchemaA.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSchemaA sets the old SchemaA of the mutation.
func withSchemaA(node *SchemaA) schemaaOption {
	return func(m *SchemaAMutation) {
		m.oldValue = func(context.Context) (*SchemaA, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SchemaAMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SchemaAMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SchemaAMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SchemaAMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SchemaA.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetInt64 sets the "int64" field.
func (m *SchemaAMutation) SetInt64(i int64) {
	m.int64 = &i
	m.addint64 = nil
}

// Int64 returns the value of the "int64" field in the mutation.
func (m *SchemaAMutation) Int64() (r int64, exists bool) {
	v := m.int64
	if v == nil {
		return
	}
	return *v, true
}

// OldInt64 returns the old "int64" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldInt64(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInt64 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInt64 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInt64: %w", err)
	}
	return oldValue.Int64, nil
}

// AddInt64 adds i to the "int64" field.
func (m *SchemaAMutation) AddInt64(i int64) {
	if m.addint64 != nil {
		*m.addint64 += i
	} else {
		m.addint64 = &i
	}
}

// AddedInt64 returns the value that was added to the "int64" field in this mutation.
func (m *SchemaAMutation) AddedInt64() (r int64, exists bool) {
	v := m.addint64
	if v == nil {
		return
	}
	return *v, true
}

// ResetInt64 resets all changes to the "int64" field.
func (m *SchemaAMutation) ResetInt64() {
	m.int64 = nil
	m.addint64 = nil
}

// SetStringBindtoFoobar sets the "string_bindto_foobar" field.
func (m *SchemaAMutation) SetStringBindtoFoobar(s string) {
	m.string_bindto_foobar = &s
}

// StringBindtoFoobar returns the value of the "string_bindto_foobar" field in the mutation.
func (m *SchemaAMutation) StringBindtoFoobar() (r string, exists bool) {
	v := m.string_bindto_foobar
	if v == nil {
		return
	}
	return *v, true
}

// OldStringBindtoFoobar returns the old "string_bindto_foobar" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldStringBindtoFoobar(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStringBindtoFoobar is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStringBindtoFoobar requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStringBindtoFoobar: %w", err)
	}
	return oldValue.StringBindtoFoobar, nil
}

// ResetStringBindtoFoobar resets all changes to the "string_bindto_foobar" field.
func (m *SchemaAMutation) ResetStringBindtoFoobar() {
	m.string_bindto_foobar = nil
}

// SetStringOptionalNullable sets the "string_optional_nullable" field.
func (m *SchemaAMutation) SetStringOptionalNullable(s string) {
	m.string_optional_nullable = &s
}

// StringOptionalNullable returns the value of the "string_optional_nullable" field in the mutation.
func (m *SchemaAMutation) StringOptionalNullable() (r string, exists bool) {
	v := m.string_optional_nullable
	if v == nil {
		return
	}
	return *v, true
}

// OldStringOptionalNullable returns the old "string_optional_nullable" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldStringOptionalNullable(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStringOptionalNullable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStringOptionalNullable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStringOptionalNullable: %w", err)
	}
	return oldValue.StringOptionalNullable, nil
}

// ClearStringOptionalNullable clears the value of the "string_optional_nullable" field.
func (m *SchemaAMutation) ClearStringOptionalNullable() {
	m.string_optional_nullable = nil
	m.clearedFields[schemaa.FieldStringOptionalNullable] = struct{}{}
}

// StringOptionalNullableCleared returns if the "string_optional_nullable" field was cleared in this mutation.
func (m *SchemaAMutation) StringOptionalNullableCleared() bool {
	_, ok := m.clearedFields[schemaa.FieldStringOptionalNullable]
	return ok
}

// ResetStringOptionalNullable resets all changes to the "string_optional_nullable" field.
func (m *SchemaAMutation) ResetStringOptionalNullable() {
	m.string_optional_nullable = nil
	delete(m.clearedFields, schemaa.FieldStringOptionalNullable)
}

// SetOptionalNullableBool sets the "optional_nullable_bool" field.
func (m *SchemaAMutation) SetOptionalNullableBool(b bool) {
	m.optional_nullable_bool = &b
}

// OptionalNullableBool returns the value of the "optional_nullable_bool" field in the mutation.
func (m *SchemaAMutation) OptionalNullableBool() (r bool, exists bool) {
	v := m.optional_nullable_bool
	if v == nil {
		return
	}
	return *v, true
}

// OldOptionalNullableBool returns the old "optional_nullable_bool" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldOptionalNullableBool(ctx context.Context) (v *bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOptionalNullableBool is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOptionalNullableBool requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptionalNullableBool: %w", err)
	}
	return oldValue.OptionalNullableBool, nil
}

// ClearOptionalNullableBool clears the value of the "optional_nullable_bool" field.
func (m *SchemaAMutation) ClearOptionalNullableBool() {
	m.optional_nullable_bool = nil
	m.clearedFields[schemaa.FieldOptionalNullableBool] = struct{}{}
}

// OptionalNullableBoolCleared returns if the "optional_nullable_bool" field was cleared in this mutation.
func (m *SchemaAMutation) OptionalNullableBoolCleared() bool {
	_, ok := m.clearedFields[schemaa.FieldOptionalNullableBool]
	return ok
}

// ResetOptionalNullableBool resets all changes to the "optional_nullable_bool" field.
func (m *SchemaAMutation) ResetOptionalNullableBool() {
	m.optional_nullable_bool = nil
	delete(m.clearedFields, schemaa.FieldOptionalNullableBool)
}

// SetJsontypeStrings sets the "jsontype_strings" field.
func (m *SchemaAMutation) SetJsontypeStrings(s []string) {
	m.jsontype_strings = &s
	m.appendjsontype_strings = nil
}

// JsontypeStrings returns the value of the "jsontype_strings" field in the mutation.
func (m *SchemaAMutation) JsontypeStrings() (r []string, exists bool) {
	v := m.jsontype_strings
	if v == nil {
		return
	}
	return *v, true
}

// OldJsontypeStrings returns the old "jsontype_strings" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldJsontypeStrings(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJsontypeStrings is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJsontypeStrings requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJsontypeStrings: %w", err)
	}
	return oldValue.JsontypeStrings, nil
}

// AppendJsontypeStrings adds s to the "jsontype_strings" field.
func (m *SchemaAMutation) AppendJsontypeStrings(s []string) {
	m.appendjsontype_strings = append(m.appendjsontype_strings, s...)
}

// AppendedJsontypeStrings returns the list of values that were appended to the "jsontype_strings" field in this mutation.
func (m *SchemaAMutation) AppendedJsontypeStrings() ([]string, bool) {
	if len(m.appendjsontype_strings) == 0 {
		return nil, false
	}
	return m.appendjsontype_strings, true
}

// ResetJsontypeStrings resets all changes to the "jsontype_strings" field.
func (m *SchemaAMutation) ResetJsontypeStrings() {
	m.jsontype_strings = nil
	m.appendjsontype_strings = nil
}

// SetJsontypeStringsOptional sets the "jsontype_strings_optional" field.
func (m *SchemaAMutation) SetJsontypeStringsOptional(s []string) {
	m.jsontype_strings_optional = &s
	m.appendjsontype_strings_optional = nil
}

// JsontypeStringsOptional returns the value of the "jsontype_strings_optional" field in the mutation.
func (m *SchemaAMutation) JsontypeStringsOptional() (r []string, exists bool) {
	v := m.jsontype_strings_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldJsontypeStringsOptional returns the old "jsontype_strings_optional" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldJsontypeStringsOptional(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJsontypeStringsOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJsontypeStringsOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJsontypeStringsOptional: %w", err)
	}
	return oldValue.JsontypeStringsOptional, nil
}

// AppendJsontypeStringsOptional adds s to the "jsontype_strings_optional" field.
func (m *SchemaAMutation) AppendJsontypeStringsOptional(s []string) {
	m.appendjsontype_strings_optional = append(m.appendjsontype_strings_optional, s...)
}

// AppendedJsontypeStringsOptional returns the list of values that were appended to the "jsontype_strings_optional" field in this mutation.
func (m *SchemaAMutation) AppendedJsontypeStringsOptional() ([]string, bool) {
	if len(m.appendjsontype_strings_optional) == 0 {
		return nil, false
	}
	return m.appendjsontype_strings_optional, true
}

// ClearJsontypeStringsOptional clears the value of the "jsontype_strings_optional" field.
func (m *SchemaAMutation) ClearJsontypeStringsOptional() {
	m.jsontype_strings_optional = nil
	m.appendjsontype_strings_optional = nil
	m.clearedFields[schemaa.FieldJsontypeStringsOptional] = struct{}{}
}

// JsontypeStringsOptionalCleared returns if the "jsontype_strings_optional" field was cleared in this mutation.
func (m *SchemaAMutation) JsontypeStringsOptionalCleared() bool {
	_, ok := m.clearedFields[schemaa.FieldJsontypeStringsOptional]
	return ok
}

// ResetJsontypeStringsOptional resets all changes to the "jsontype_strings_optional" field.
func (m *SchemaAMutation) ResetJsontypeStringsOptional() {
	m.jsontype_strings_optional = nil
	m.appendjsontype_strings_optional = nil
	delete(m.clearedFields, schemaa.FieldJsontypeStringsOptional)
}

// SetJsontypeInts sets the "jsontype_ints" field.
func (m *SchemaAMutation) SetJsontypeInts(i []int) {
	m.jsontype_ints = &i
	m.appendjsontype_ints = nil
}

// JsontypeInts returns the value of the "jsontype_ints" field in the mutation.
func (m *SchemaAMutation) JsontypeInts() (r []int, exists bool) {
	v := m.jsontype_ints
	if v == nil {
		return
	}
	return *v, true
}

// OldJsontypeInts returns the old "jsontype_ints" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldJsontypeInts(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJsontypeInts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJsontypeInts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJsontypeInts: %w", err)
	}
	return oldValue.JsontypeInts, nil
}

// AppendJsontypeInts adds i to the "jsontype_ints" field.
func (m *SchemaAMutation) AppendJsontypeInts(i []int) {
	m.appendjsontype_ints = append(m.appendjsontype_ints, i...)
}

// AppendedJsontypeInts returns the list of values that were appended to the "jsontype_ints" field in this mutation.
func (m *SchemaAMutation) AppendedJsontypeInts() ([]int, bool) {
	if len(m.appendjsontype_ints) == 0 {
		return nil, false
	}
	return m.appendjsontype_ints, true
}

// ResetJsontypeInts resets all changes to the "jsontype_ints" field.
func (m *SchemaAMutation) ResetJsontypeInts() {
	m.jsontype_ints = nil
	m.appendjsontype_ints = nil
}

// SetJsontypeIntsOptional sets the "jsontype_ints_optional" field.
func (m *SchemaAMutation) SetJsontypeIntsOptional(i []int) {
	m.jsontype_ints_optional = &i
	m.appendjsontype_ints_optional = nil
}

// JsontypeIntsOptional returns the value of the "jsontype_ints_optional" field in the mutation.
func (m *SchemaAMutation) JsontypeIntsOptional() (r []int, exists bool) {
	v := m.jsontype_ints_optional
	if v == nil {
		return
	}
	return *v, true
}

// OldJsontypeIntsOptional returns the old "jsontype_ints_optional" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldJsontypeIntsOptional(ctx context.Context) (v []int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJsontypeIntsOptional is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJsontypeIntsOptional requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJsontypeIntsOptional: %w", err)
	}
	return oldValue.JsontypeIntsOptional, nil
}

// AppendJsontypeIntsOptional adds i to the "jsontype_ints_optional" field.
func (m *SchemaAMutation) AppendJsontypeIntsOptional(i []int) {
	m.appendjsontype_ints_optional = append(m.appendjsontype_ints_optional, i...)
}

// AppendedJsontypeIntsOptional returns the list of values that were appended to the "jsontype_ints_optional" field in this mutation.
func (m *SchemaAMutation) AppendedJsontypeIntsOptional() ([]int, bool) {
	if len(m.appendjsontype_ints_optional) == 0 {
		return nil, false
	}
	return m.appendjsontype_ints_optional, true
}

// ClearJsontypeIntsOptional clears the value of the "jsontype_ints_optional" field.
func (m *SchemaAMutation) ClearJsontypeIntsOptional() {
	m.jsontype_ints_optional = nil
	m.appendjsontype_ints_optional = nil
	m.clearedFields[schemaa.FieldJsontypeIntsOptional] = struct{}{}
}

// JsontypeIntsOptionalCleared returns if the "jsontype_ints_optional" field was cleared in this mutation.
func (m *SchemaAMutation) JsontypeIntsOptionalCleared() bool {
	_, ok := m.clearedFields[schemaa.FieldJsontypeIntsOptional]
	return ok
}

// ResetJsontypeIntsOptional resets all changes to the "jsontype_ints_optional" field.
func (m *SchemaAMutation) ResetJsontypeIntsOptional() {
	m.jsontype_ints_optional = nil
	m.appendjsontype_ints_optional = nil
	delete(m.clearedFields, schemaa.FieldJsontypeIntsOptional)
}

// SetRequiredEnum sets the "required_enum" field.
func (m *SchemaAMutation) SetRequiredEnum(se schemaa.RequiredEnum) {
	m.required_enum = &se
}

// RequiredEnum returns the value of the "required_enum" field in the mutation.
func (m *SchemaAMutation) RequiredEnum() (r schemaa.RequiredEnum, exists bool) {
	v := m.required_enum
	if v == nil {
		return
	}
	return *v, true
}

// OldRequiredEnum returns the old "required_enum" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldRequiredEnum(ctx context.Context) (v schemaa.RequiredEnum, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequiredEnum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequiredEnum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequiredEnum: %w", err)
	}
	return oldValue.RequiredEnum, nil
}

// ResetRequiredEnum resets all changes to the "required_enum" field.
func (m *SchemaAMutation) ResetRequiredEnum() {
	m.required_enum = nil
}

// SetOptionalNullableEnum sets the "optional_nullable_enum" field.
func (m *SchemaAMutation) SetOptionalNullableEnum(sne schemaa.OptionalNullableEnum) {
	m.optional_nullable_enum = &sne
}

// OptionalNullableEnum returns the value of the "optional_nullable_enum" field in the mutation.
func (m *SchemaAMutation) OptionalNullableEnum() (r schemaa.OptionalNullableEnum, exists bool) {
	v := m.optional_nullable_enum
	if v == nil {
		return
	}
	return *v, true
}

// OldOptionalNullableEnum returns the old "optional_nullable_enum" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldOptionalNullableEnum(ctx context.Context) (v *schemaa.OptionalNullableEnum, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOptionalNullableEnum is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOptionalNullableEnum requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOptionalNullableEnum: %w", err)
	}
	return oldValue.OptionalNullableEnum, nil
}

// ClearOptionalNullableEnum clears the value of the "optional_nullable_enum" field.
func (m *SchemaAMutation) ClearOptionalNullableEnum() {
	m.optional_nullable_enum = nil
	m.clearedFields[schemaa.FieldOptionalNullableEnum] = struct{}{}
}

// OptionalNullableEnumCleared returns if the "optional_nullable_enum" field was cleared in this mutation.
func (m *SchemaAMutation) OptionalNullableEnumCleared() bool {
	_, ok := m.clearedFields[schemaa.FieldOptionalNullableEnum]
	return ok
}

// ResetOptionalNullableEnum resets all changes to the "optional_nullable_enum" field.
func (m *SchemaAMutation) ResetOptionalNullableEnum() {
	m.optional_nullable_enum = nil
	delete(m.clearedFields, schemaa.FieldOptionalNullableEnum)
}

// SetBytes sets the "bytes" field.
func (m *SchemaAMutation) SetBytes(b []byte) {
	m.bytes = &b
}

// Bytes returns the value of the "bytes" field in the mutation.
func (m *SchemaAMutation) Bytes() (r []byte, exists bool) {
	v := m.bytes
	if v == nil {
		return
	}
	return *v, true
}

// OldBytes returns the old "bytes" field's value of the SchemaA entity.
// If the SchemaA object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SchemaAMutation) OldBytes(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBytes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBytes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBytes: %w", err)
	}
	return oldValue.Bytes, nil
}

// ResetBytes resets all changes to the "bytes" field.
func (m *SchemaAMutation) ResetBytes() {
	m.bytes = nil
}

// SetEdgeSchemabUniqueRequiredID sets the "edge_schemab_unique_required" edge to the SchemaB entity by id.
func (m *SchemaAMutation) SetEdgeSchemabUniqueRequiredID(id int64) {
	m.edge_schemab_unique_required = &id
}

// ClearEdgeSchemabUniqueRequired clears the "edge_schemab_unique_required" edge to the SchemaB entity.
func (m *SchemaAMutation) ClearEdgeSchemabUniqueRequired() {
	m.clearededge_schemab_unique_required = true
}

// EdgeSchemabUniqueRequiredCleared reports if the "edge_schemab_unique_required" edge to the SchemaB entity was cleared.
func (m *SchemaAMutation) EdgeSchemabUniqueRequiredCleared() bool {
	return m.clearededge_schemab_unique_required
}

// EdgeSchemabUniqueRequiredID returns the "edge_schemab_unique_required" edge ID in the mutation.
func (m *SchemaAMutation) EdgeSchemabUniqueRequiredID() (id int64, exists bool) {
	if m.edge_schemab_unique_required != nil {
		return *m.edge_schemab_unique_required, true
	}
	return
}

// EdgeSchemabUniqueRequiredIDs returns the "edge_schemab_unique_required" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EdgeSchemabUniqueRequiredID instead. It exists only for internal usage by the builders.
func (m *SchemaAMutation) EdgeSchemabUniqueRequiredIDs() (ids []int64) {
	if id := m.edge_schemab_unique_required; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEdgeSchemabUniqueRequired resets all changes to the "edge_schemab_unique_required" edge.
func (m *SchemaAMutation) ResetEdgeSchemabUniqueRequired() {
	m.edge_schemab_unique_required = nil
	m.clearededge_schemab_unique_required = false
}

// SetEdgeSchemabUniqueRequiredBindtoBsID sets the "edge_schemab_unique_required_bindto_bs" edge to the SchemaB entity by id.
func (m *SchemaAMutation) SetEdgeSchemabUniqueRequiredBindtoBsID(id int64) {
	m.edge_schemab_unique_required_bindto_bs = &id
}

// ClearEdgeSchemabUniqueRequiredBindtoBs clears the "edge_schemab_unique_required_bindto_bs" edge to the SchemaB entity.
func (m *SchemaAMutation) ClearEdgeSchemabUniqueRequiredBindtoBs() {
	m.clearededge_schemab_unique_required_bindto_bs = true
}

// EdgeSchemabUniqueRequiredBindtoBsCleared reports if the "edge_schemab_unique_required_bindto_bs" edge to the SchemaB entity was cleared.
func (m *SchemaAMutation) EdgeSchemabUniqueRequiredBindtoBsCleared() bool {
	return m.clearededge_schemab_unique_required_bindto_bs
}

// EdgeSchemabUniqueRequiredBindtoBsID returns the "edge_schemab_unique_required_bindto_bs" edge ID in the mutation.
func (m *SchemaAMutation) EdgeSchemabUniqueRequiredBindtoBsID() (id int64, exists bool) {
	if m.edge_schemab_unique_required_bindto_bs != nil {
		return *m.edge_schemab_unique_required_bindto_bs, true
	}
	return
}

// EdgeSchemabUniqueRequiredBindtoBsIDs returns the "edge_schemab_unique_required_bindto_bs" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EdgeSchemabUniqueRequiredBindtoBsID instead. It exists only for internal usage by the builders.
func (m *SchemaAMutation) EdgeSchemabUniqueRequiredBindtoBsIDs() (ids []int64) {
	if id := m.edge_schemab_unique_required_bindto_bs; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEdgeSchemabUniqueRequiredBindtoBs resets all changes to the "edge_schemab_unique_required_bindto_bs" edge.
func (m *SchemaAMutation) ResetEdgeSchemabUniqueRequiredBindtoBs() {
	m.edge_schemab_unique_required_bindto_bs = nil
	m.clearededge_schemab_unique_required_bindto_bs = false
}

// SetEdgeSchemabUniqueOptionalID sets the "edge_schemab_unique_optional" edge to the SchemaB entity by id.
func (m *SchemaAMutation) SetEdgeSchemabUniqueOptionalID(id int64) {
	m.edge_schemab_unique_optional = &id
}

// ClearEdgeSchemabUniqueOptional clears the "edge_schemab_unique_optional" edge to the SchemaB entity.
func (m *SchemaAMutation) ClearEdgeSchemabUniqueOptional() {
	m.clearededge_schemab_unique_optional = true
}

// EdgeSchemabUniqueOptionalCleared reports if the "edge_schemab_unique_optional" edge to the SchemaB entity was cleared.
func (m *SchemaAMutation) EdgeSchemabUniqueOptionalCleared() bool {
	return m.clearededge_schemab_unique_optional
}

// EdgeSchemabUniqueOptionalID returns the "edge_schemab_unique_optional" edge ID in the mutation.
func (m *SchemaAMutation) EdgeSchemabUniqueOptionalID() (id int64, exists bool) {
	if m.edge_schemab_unique_optional != nil {
		return *m.edge_schemab_unique_optional, true
	}
	return
}

// EdgeSchemabUniqueOptionalIDs returns the "edge_schemab_unique_optional" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EdgeSchemabUniqueOptionalID instead. It exists only for internal usage by the builders.
func (m *SchemaAMutation) EdgeSchemabUniqueOptionalIDs() (ids []int64) {
	if id := m.edge_schemab_unique_optional; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEdgeSchemabUniqueOptional resets all changes to the "edge_schemab_unique_optional" edge.
func (m *SchemaAMutation) ResetEdgeSchemabUniqueOptional() {
	m.edge_schemab_unique_optional = nil
	m.clearededge_schemab_unique_optional = false
}

// AddEdgeSchemabIDs adds the "edge_schemab" edge to the SchemaB entity by ids.
func (m *SchemaAMutation) AddEdgeSchemabIDs(ids ...int64) {
	if m.edge_schemab == nil {
		m.edge_schemab = make(map[int64]struct{})
	}
	for i := range ids {
		m.edge_schemab[ids[i]] = struct{}{}
	}
}

// ClearEdgeSchemab clears the "edge_schemab" edge to the SchemaB entity.
func (m *SchemaAMutation) ClearEdgeSchemab() {
	m.clearededge_schemab = true
}

// EdgeSchemabCleared reports if the "edge_schemab" edge to the SchemaB entity was cleared.
func (m *SchemaAMutation) EdgeSchemabCleared() bool {
	return m.clearededge_schemab
}

// RemoveEdgeSchemabIDs removes the "edge_schemab" edge to the SchemaB entity by IDs.
func (m *SchemaAMutation) RemoveEdgeSchemabIDs(ids ...int64) {
	if m.removededge_schemab == nil {
		m.removededge_schemab = make(map[int64]struct{})
	}
	for i := range ids {
		delete(m.edge_schemab, ids[i])
		m.removededge_schemab[ids[i]] = struct{}{}
	}
}

// RemovedEdgeSchemab returns the removed IDs of the "edge_schemab" edge to the SchemaB entity.
func (m *SchemaAMutation) RemovedEdgeSchemabIDs() (ids []int64) {
	for id := range m.removededge_schemab {
		ids = append(ids, id)
	}
	return
}

// EdgeSchemabIDs returns the "edge_schemab" edge IDs in the mutation.
func (m *SchemaAMutation) EdgeSchemabIDs() (ids []int64) {
	for id := range m.edge_schemab {
		ids = append(ids, id)
	}
	return
}

// ResetEdgeSchemab resets all changes to the "edge_schemab" edge.
func (m *SchemaAMutation) ResetEdgeSchemab() {
	m.edge_schemab = nil
	m.clearededge_schemab = false
	m.removededge_schemab = nil
}

// AddEdgeSchemaaRecursiveIDs adds the "edge_schemaa_recursive" edge to the SchemaA entity by ids.
func (m *SchemaAMutation) AddEdgeSchemaaRecursiveIDs(ids ...int) {
	if m.edge_schemaa_recursive == nil {
		m.edge_schemaa_recursive = make(map[int]struct{})
	}
	for i := range ids {
		m.edge_schemaa_recursive[ids[i]] = struct{}{}
	}
}

// ClearEdgeSchemaaRecursive clears the "edge_schemaa_recursive" edge to the SchemaA entity.
func (m *SchemaAMutation) ClearEdgeSchemaaRecursive() {
	m.clearededge_schemaa_recursive = true
}

// EdgeSchemaaRecursiveCleared reports if the "edge_schemaa_recursive" edge to the SchemaA entity was cleared.
func (m *SchemaAMutation) EdgeSchemaaRecursiveCleared() bool {
	return m.clearededge_schemaa_recursive
}

// RemoveEdgeSchemaaRecursiveIDs removes the "edge_schemaa_recursive" edge to the SchemaA entity by IDs.
func (m *SchemaAMutation) RemoveEdgeSchemaaRecursiveIDs(ids ...int) {
	if m.removededge_schemaa_recursive == nil {
		m.removededge_schemaa_recursive = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.edge_schemaa_recursive, ids[i])
		m.removededge_schemaa_recursive[ids[i]] = struct{}{}
	}
}

// RemovedEdgeSchemaaRecursive returns the removed IDs of the "edge_schemaa_recursive" edge to the SchemaA entity.
func (m *SchemaAMutation) RemovedEdgeSchemaaRecursiveIDs() (ids []int) {
	for id := range m.removededge_schemaa_recursive {
		ids = append(ids, id)
	}
	return
}

// EdgeSchemaaRecursiveIDs returns the "edge_schemaa_recursive" edge IDs in the mutation.
func (m *SchemaAMutation) EdgeSchemaaRecursiveIDs() (ids []int) {
	for id := range m.edge_schemaa_recursive {
		ids = append(ids, id)
	}
	return
}

// ResetEdgeSchemaaRecursive resets all changes to the "edge_schemaa_recursive" edge.
func (m *SchemaAMutation) ResetEdgeSchemaaRecursive() {
	m.edge_schemaa_recursive = nil
	m.clearededge_schemaa_recursive = false
	m.removededge_schemaa_recursive = nil
}

// Where appends a list predicates to the SchemaAMutation builder.
func (m *SchemaAMutation) Where(ps ...predicate.SchemaA) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SchemaAMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SchemaAMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SchemaA, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SchemaAMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SchemaAMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SchemaA).
func (m *SchemaAMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SchemaAMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.int64 != nil {
		fields = append(fields, schemaa.FieldInt64)
	}
	if m.string_bindto_foobar != nil {
		fields = append(fields, schemaa.FieldStringBindtoFoobar)
	}
	if m.string_optional_nullable != nil {
		fields = append(fields, schemaa.FieldStringOptionalNullable)
	}
	if m.optional_nullable_bool != nil {
		fields = append(fields, schemaa.FieldOptionalNullableBool)
	}
	if m.jsontype_strings != nil {
		fields = append(fields, schemaa.FieldJsontypeStrings)
	}
	if m.jsontype_strings_optional != nil {
		fields = append(fields, schemaa.FieldJsontypeStringsOptional)
	}
	if m.jsontype_ints != nil {
		fields = append(fields, schemaa.FieldJsontypeInts)
	}
	if m.jsontype_ints_optional != nil {
		fields = append(fields, schemaa.FieldJsontypeIntsOptional)
	}
	if m.required_enum != nil {
		fields = append(fields, schemaa.FieldRequiredEnum)
	}
	if m.optional_nullable_enum != nil {
		fields = append(fields, schemaa.FieldOptionalNullableEnum)
	}
	if m.bytes != nil {
		fields = append(fields, schemaa.FieldBytes)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SchemaAMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case schemaa.FieldInt64:
		return m.Int64()
	case schemaa.FieldStringBindtoFoobar:
		return m.StringBindtoFoobar()
	case schemaa.FieldStringOptionalNullable:
		return m.StringOptionalNullable()
	case schemaa.FieldOptionalNullableBool:
		return m.OptionalNullableBool()
	case schemaa.FieldJsontypeStrings:
		return m.JsontypeStrings()
	case schemaa.FieldJsontypeStringsOptional:
		return m.JsontypeStringsOptional()
	case schemaa.FieldJsontypeInts:
		return m.JsontypeInts()
	case schemaa.FieldJsontypeIntsOptional:
		return m.JsontypeIntsOptional()
	case schemaa.FieldRequiredEnum:
		return m.RequiredEnum()
	case schemaa.FieldOptionalNullableEnum:
		return m.OptionalNullableEnum()
	case schemaa.FieldBytes:
		return m.Bytes()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SchemaAMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case schemaa.FieldInt64:
		return m.OldInt64(ctx)
	case schemaa.FieldStringBindtoFoobar:
		return m.OldStringBindtoFoobar(ctx)
	case schemaa.FieldStringOptionalNullable:
		return m.OldStringOptionalNullable(ctx)
	case schemaa.FieldOptionalNullableBool:
		return m.OldOptionalNullableBool(ctx)
	case schemaa.FieldJsontypeStrings:
		return m.OldJsontypeStrings(ctx)
	case schemaa.FieldJsontypeStringsOptional:
		return m.OldJsontypeStringsOptional(ctx)
	case schemaa.FieldJsontypeInts:
		return m.OldJsontypeInts(ctx)
	case schemaa.FieldJsontypeIntsOptional:
		return m.OldJsontypeIntsOptional(ctx)
	case schemaa.FieldRequiredEnum:
		return m.OldRequiredEnum(ctx)
	case schemaa.FieldOptionalNullableEnum:
		return m.OldOptionalNullableEnum(ctx)
	case schemaa.FieldBytes:
		return m.OldBytes(ctx)
	}
	return nil, fmt.Errorf("unknown SchemaA field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SchemaAMutation) SetField(name string, value ent.Value) error {
	switch name {
	case schemaa.FieldInt64:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInt64(v)
		return nil
	case schemaa.FieldStringBindtoFoobar:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStringBindtoFoobar(v)
		return nil
	case schemaa.FieldStringOptionalNullable:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStringOptionalNullable(v)
		return nil
	case schemaa.FieldOptionalNullableBool:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptionalNullableBool(v)
		return nil
	case schemaa.FieldJsontypeStrings:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJsontypeStrings(v)
		return nil
	case schemaa.FieldJsontypeStringsOptional:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJsontypeStringsOptional(v)
		return nil
	case schemaa.FieldJsontypeInts:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJsontypeInts(v)
		return nil
	case schemaa.FieldJsontypeIntsOptional:
		v, ok := value.([]int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJsontypeIntsOptional(v)
		return nil
	case schemaa.FieldRequiredEnum:
		v, ok := value.(schemaa.RequiredEnum)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequiredEnum(v)
		return nil
	case schemaa.FieldOptionalNullableEnum:
		v, ok := value.(schemaa.OptionalNullableEnum)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOptionalNullableEnum(v)
		return nil
	case schemaa.FieldBytes:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBytes(v)
		return nil
	}
	return fmt.Errorf("unknown SchemaA field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SchemaAMutation) AddedFields() []string {
	var fields []string
	if m.addint64 != nil {
		fields = append(fields, schemaa.FieldInt64)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SchemaAMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case schemaa.FieldInt64:
		return m.AddedInt64()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SchemaAMutation) AddField(name string, value ent.Value) error {
	switch name {
	case schemaa.FieldInt64:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddInt64(v)
		return nil
	}
	return fmt.Errorf("unknown SchemaA numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SchemaAMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(schemaa.FieldStringOptionalNullable) {
		fields = append(fields, schemaa.FieldStringOptionalNullable)
	}
	if m.FieldCleared(schemaa.FieldOptionalNullableBool) {
		fields = append(fields, schemaa.FieldOptionalNullableBool)
	}
	if m.FieldCleared(schemaa.FieldJsontypeStringsOptional) {
		fields = append(fields, schemaa.FieldJsontypeStringsOptional)
	}
	if m.FieldCleared(schemaa.FieldJsontypeIntsOptional) {
		fields = append(fields, schemaa.FieldJsontypeIntsOptional)
	}
	if m.FieldCleared(schemaa.FieldOptionalNullableEnum) {
		fields = append(fields, schemaa.FieldOptionalNullableEnum)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SchemaAMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SchemaAMutation) ClearField(name string) error {
	switch name {
	case schemaa.FieldStringOptionalNullable:
		m.ClearStringOptionalNullable()
		return nil
	case schemaa.FieldOptionalNullableBool:
		m.ClearOptionalNullableBool()
		return nil
	case schemaa.FieldJsontypeStringsOptional:
		m.ClearJsontypeStringsOptional()
		return nil
	case schemaa.FieldJsontypeIntsOptional:
		m.ClearJsontypeIntsOptional()
		return nil
	case schemaa.FieldOptionalNullableEnum:
		m.ClearOptionalNullableEnum()
		return nil
	}
	return fmt.Errorf("unknown SchemaA nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SchemaAMutation) ResetField(name string) error {
	switch name {
	case schemaa.FieldInt64:
		m.ResetInt64()
		return nil
	case schemaa.FieldStringBindtoFoobar:
		m.ResetStringBindtoFoobar()
		return nil
	case schemaa.FieldStringOptionalNullable:
		m.ResetStringOptionalNullable()
		return nil
	case schemaa.FieldOptionalNullableBool:
		m.ResetOptionalNullableBool()
		return nil
	case schemaa.FieldJsontypeStrings:
		m.ResetJsontypeStrings()
		return nil
	case schemaa.FieldJsontypeStringsOptional:
		m.ResetJsontypeStringsOptional()
		return nil
	case schemaa.FieldJsontypeInts:
		m.ResetJsontypeInts()
		return nil
	case schemaa.FieldJsontypeIntsOptional:
		m.ResetJsontypeIntsOptional()
		return nil
	case schemaa.FieldRequiredEnum:
		m.ResetRequiredEnum()
		return nil
	case schemaa.FieldOptionalNullableEnum:
		m.ResetOptionalNullableEnum()
		return nil
	case schemaa.FieldBytes:
		m.ResetBytes()
		return nil
	}
	return fmt.Errorf("unknown SchemaA field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SchemaAMutation) AddedEdges() []string {
	edges := make([]string, 0, 5)
	if m.edge_schemab_unique_required != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemabUniqueRequired)
	}
	if m.edge_schemab_unique_required_bindto_bs != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemabUniqueRequiredBindtoBs)
	}
	if m.edge_schemab_unique_optional != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemabUniqueOptional)
	}
	if m.edge_schemab != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemab)
	}
	if m.edge_schemaa_recursive != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemaaRecursive)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SchemaAMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case schemaa.EdgeEdgeSchemabUniqueRequired:
		if id := m.edge_schemab_unique_required; id != nil {
			return []ent.Value{*id}
		}
	case schemaa.EdgeEdgeSchemabUniqueRequiredBindtoBs:
		if id := m.edge_schemab_unique_required_bindto_bs; id != nil {
			return []ent.Value{*id}
		}
	case schemaa.EdgeEdgeSchemabUniqueOptional:
		if id := m.edge_schemab_unique_optional; id != nil {
			return []ent.Value{*id}
		}
	case schemaa.EdgeEdgeSchemab:
		ids := make([]ent.Value, 0, len(m.edge_schemab))
		for id := range m.edge_schemab {
			ids = append(ids, id)
		}
		return ids
	case schemaa.EdgeEdgeSchemaaRecursive:
		ids := make([]ent.Value, 0, len(m.edge_schemaa_recursive))
		for id := range m.edge_schemaa_recursive {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SchemaAMutation) RemovedEdges() []string {
	edges := make([]string, 0, 5)
	if m.removededge_schemab != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemab)
	}
	if m.removededge_schemaa_recursive != nil {
		edges = append(edges, schemaa.EdgeEdgeSchemaaRecursive)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SchemaAMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case schemaa.EdgeEdgeSchemab:
		ids := make([]ent.Value, 0, len(m.removededge_schemab))
		for id := range m.removededge_schemab {
			ids = append(ids, id)
		}
		return ids
	case schemaa.EdgeEdgeSchemaaRecursive:
		ids := make([]ent.Value, 0, len(m.removededge_schemaa_recursive))
		for id := range m.removededge_schemaa_recursive {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SchemaAMutation) ClearedEdges() []string {
	edges := make([]string, 0, 5)
	if m.clearededge_schemab_unique_required {
		edges = append(edges, schemaa.EdgeEdgeSchemabUniqueRequired)
	}
	if m.clearededge_schemab_unique_required_bindto_bs {
		edges = append(edges, schemaa.EdgeEdgeSchemabUniqueRequiredBindtoBs)
	}
	if m.clearededge_schemab_unique_optional {
		edges = append(edges, schemaa.EdgeEdgeSchemabUniqueOptional)
	}
	if m.clearededge_schemab {
		edges = append(edges, schemaa.EdgeEdgeSchemab)
	}
	if m.clearededge_schemaa_recursive {
		edges = append(edges, schemaa.EdgeEdgeSchemaaRecursive)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SchemaAMutation) EdgeCleared(name string) bool {
	switch name {
	case schemaa.EdgeEdgeSchemabUniqueRequired:
		return m.clearededge_schemab_unique_required
	case schemaa.EdgeEdgeSchemabUniqueRequiredBindtoBs:
		return m.clearededge_schemab_unique_required_bindto_bs
	case schemaa.EdgeEdgeSchemabUniqueOptional:
		return m.clearededge_schemab_unique_optional
	case schemaa.EdgeEdgeSchemab:
		return m.clearededge_schemab
	case schemaa.EdgeEdgeSchemaaRecursive:
		return m.clearededge_schemaa_recursive
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SchemaAMutation) ClearEdge(name string) error {
	switch name {
	case schemaa.EdgeEdgeSchemabUniqueRequired:
		m.ClearEdgeSchemabUniqueRequired()
		return nil
	case schemaa.EdgeEdgeSchemabUniqueRequiredBindtoBs:
		m.ClearEdgeSchemabUniqueRequiredBindtoBs()
		return nil
	case schemaa.EdgeEdgeSchemabUniqueOptional:
		m.ClearEdgeSchemabUniqueOptional()
		return nil
	}
	return fmt.Errorf("unknown SchemaA unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SchemaAMutation) ResetEdge(name string) error {
	switch name {
	case schemaa.EdgeEdgeSchemabUniqueRequired:
		m.ResetEdgeSchemabUniqueRequired()
		return nil
	case schemaa.EdgeEdgeSchemabUniqueRequiredBindtoBs:
		m.ResetEdgeSchemabUniqueRequiredBindtoBs()
		return nil
	case schemaa.EdgeEdgeSchemabUniqueOptional:
		m.ResetEdgeSchemabUniqueOptional()
		return nil
	case schemaa.EdgeEdgeSchemab:
		m.ResetEdgeSchemab()
		return nil
	case schemaa.EdgeEdgeSchemaaRecursive:
		m.ResetEdgeSchemaaRecursive()
		return nil
	}
	return fmt.Errorf("unknown SchemaA edge %s", name)
}

// SchemaBMutation represents an operation that mutates the SchemaB nodes in the graph.
type SchemaBMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*SchemaB, error)
	predicates    []predicate.SchemaB
}

var _ ent.Mutation = (*SchemaBMutation)(nil)

// schemabOption allows management of the mutation configuration using functional options.
type schemabOption func(*SchemaBMutation)

// newSchemaBMutation creates new mutation for the SchemaB entity.
func newSchemaBMutation(c config, op Op, opts ...schemabOption) *SchemaBMutation {
	m := &SchemaBMutation{
		config:        c,
		op:            op,
		typ:           TypeSchemaB,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSchemaBID sets the ID field of the mutation.
func withSchemaBID(id int64) schemabOption {
	return func(m *SchemaBMutation) {
		var (
			err   error
			once  sync.Once
			value *SchemaB
		)
		m.oldValue = func(ctx context.Context) (*SchemaB, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SchemaB.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSchemaB sets the old SchemaB of the mutation.
func withSchemaB(node *SchemaB) schemabOption {
	return func(m *SchemaBMutation) {
		m.oldValue = func(context.Context) (*SchemaB, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SchemaBMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SchemaBMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of SchemaB entities.
func (m *SchemaBMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SchemaBMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SchemaBMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SchemaB.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// Where appends a list predicates to the SchemaBMutation builder.
func (m *SchemaBMutation) Where(ps ...predicate.SchemaB) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SchemaBMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SchemaBMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SchemaB, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SchemaBMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SchemaBMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SchemaB).
func (m *SchemaBMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SchemaBMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SchemaBMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SchemaBMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown SchemaB field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SchemaBMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SchemaB field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SchemaBMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SchemaBMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SchemaBMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown SchemaB numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SchemaBMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SchemaBMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SchemaBMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SchemaB nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SchemaBMutation) ResetField(name string) error {
	return fmt.Errorf("unknown SchemaB field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SchemaBMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SchemaBMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SchemaBMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SchemaBMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SchemaBMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SchemaBMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SchemaBMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown SchemaB unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SchemaBMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown SchemaB edge %s", name)
}
